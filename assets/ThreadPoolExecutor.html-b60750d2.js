const e=JSON.parse('{"key":"v-15460eb0","path":"/posts/java/ThreadPoolExecutor.html","title":"ThreadPoolExecutor线程池","lang":"zh-CN","frontmatter":{"title":"ThreadPoolExecutor线程池","article":true,"icon":"editor","date":"2023-09-24T00:00:00.000Z","category":["JAVA学习"],"tag":["多线程","JUC"],"description":"ThreadPoolExecutor线程池 参考：什么是线程池 1. 什么是线程池 线程池其实是一种池化的技术实现，池化技术的核心思想就是实现资源的复用，避免资源的重复创建和销毁带来的性能开销。线程池可以管理一堆线程，让线程执行完任务之后不进行销毁，而是继续去处理其它线程已经提交的任务。","head":[["meta",{"property":"og:url","content":"https://shbone.github.io/posts/java/ThreadPoolExecutor.html"}],["meta",{"property":"og:site_name","content":"Sunhb博客"}],["meta",{"property":"og:title","content":"ThreadPoolExecutor线程池"}],["meta",{"property":"og:description","content":"ThreadPoolExecutor线程池 参考：什么是线程池 1. 什么是线程池 线程池其实是一种池化的技术实现，池化技术的核心思想就是实现资源的复用，避免资源的重复创建和销毁带来的性能开销。线程池可以管理一堆线程，让线程执行完任务之后不进行销毁，而是继续去处理其它线程已经提交的任务。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-24T16:21:00.000Z"}],["meta",{"property":"article:author","content":"Sunhb"}],["meta",{"property":"article:tag","content":"多线程"}],["meta",{"property":"article:tag","content":"JUC"}],["meta",{"property":"article:published_time","content":"2023-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-24T16:21:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ThreadPoolExecutor线程池\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-24T16:21:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Sunhb\\",\\"url\\":\\"https://github.com/shbone\\"}]}"]]},"headers":[{"level":2,"title":"1. 什么是线程池","slug":"_1-什么是线程池","link":"#_1-什么是线程池","children":[]},{"level":2,"title":"2. 线程池运行原理","slug":"_2-线程池运行原理","link":"#_2-线程池运行原理","children":[]},{"level":2,"title":"3. ThreadPoolExecutor执行方法","slug":"_3-threadpoolexecutor执行方法","link":"#_3-threadpoolexecutor执行方法","children":[]}],"git":{"createdTime":1695572460000,"updatedTime":1695572460000,"contributors":[{"name":"shbone","email":"598924626@qq.com","commits":1}]},"readingTime":{"minutes":1.77,"words":530},"filePathRelative":"posts/java/ThreadPoolExecutor.md","localizedDate":"2023年9月24日","excerpt":"<h1> ThreadPoolExecutor线程池</h1>\\n<blockquote>\\n<p>参考：<a href=\\"https://javabetter.cn/thread/pool.html#%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E6%B1%A0\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">什么是线程池</a></p>\\n</blockquote>\\n<h2> 1. 什么是线程池</h2>\\n<p>线程池其实是一种池化的技术实现，<strong>池化技术的核心思想就是实现资源的复用，避免资源的重复创建和销毁带来的性能开销</strong>。线程池可以管理一堆线程，让线程执行完任务之后不进行销毁，而是继续去处理其它线程已经提交的任务。</p>","autoDesc":true}');export{e as data};
