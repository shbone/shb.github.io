import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,e as i,a as n,b as s,d as t,f as l}from"./app-b4594200.js";const u={},d=n("h1",{id:"jvm内存结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jvm内存结构","aria-hidden":"true"},"#"),s(" JVM内存结构")],-1),r=n("p",null,"线程代码何时适合加锁？",-1),k={class:"hint-container tip"},v=n("p",{class:"hint-container-title"},"提示",-1),m={href:"https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/Java%20%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%20100%20%E4%BE%8B/02%20%E4%BB%A3%E7%A0%81%E5%8A%A0%E9%94%81%EF%BC%9A%E4%B8%8D%E8%A6%81%E8%AE%A9%E2%80%9C%E9%94%81%E2%80%9D%E4%BA%8B%E6%88%90%E4%B8%BA%E7%83%A6%E5%BF%83%E4%BA%8B.md",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/JosephZhu1983/java-common-mistakes",target:"_blank",rel:"noopener noreferrer"},g=n("br",null,null,-1),h=l(`<h2 id="_1-线程锁如何锁住变量" tabindex="-1"><a class="header-anchor" href="#_1-线程锁如何锁住变量" aria-hidden="true">#</a> 1. 线程锁如何锁住变量</h2><h3 id="_1-1-问题展示" tabindex="-1"><a class="header-anchor" href="#_1-1-问题展示" aria-hidden="true">#</a> 1.1 问题展示</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Interesting</span> <span class="token punctuation">{</span>
    <span class="token keyword">volatile</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">volatile</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;add start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            a<span class="token operator">++</span><span class="token punctuation">;</span>
            b<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;add done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;compare start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//a始终等于b吗？</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;a:{},b:{},{}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//最后的a&gt;b应该始终是false吗？</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;compare done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;wrong2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">wrong2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Interesting</span> interesting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Interesting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> interesting<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> interesting<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按道理，a 和 b 同样进行累加操作，应该始终相等，compare 中的第一次判断应该始终不会成立，不会输出任何日志。但是，执行代码后发现不但输出了日志，部分<code>a</code>和<code>b</code>是不相等的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[15:44:10.805] [Thread-28] [INFO ] [j.c.lock.lockscope.Interesting:25  ] - a:979751,b:979754,false
[15:44:10.805] [Thread-28] [INFO ] [j.c.lock.lockscope.Interesting:25  ] - a:988792,b:988793,true
[15:44:10.805] [Thread-28] [INFO ] [j.c.lock.lockscope.Interesting:25  ] - a:992597,b:992596,true
[15:44:10.805] [Thread-28] [INFO ] [j.c.lock.lockscope.Interesting:25  ] - a:996236,b:996237,true
[15:44:10.805] [Thread-28] [INFO ] [j.c.lock.lockscope.Interesting:25  ] - a:999856,b:999857,false
[15:44:10.805] [Thread-27] [INFO ] [j.c.lock.lockscope.Interesting:18  ] - add done
[15:44:10.806] [Thread-28] [INFO ] [j.c.lock.lockscope.Interesting:29  ] - compare done
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-问题分析" tabindex="-1"><a class="header-anchor" href="#_1-2-问题分析" aria-hidden="true">#</a> 1.2 问题分析</h3><p>原因分析，目前尽管<code>add</code>函数使用<code>synchronized</code>关键字解决了<code>add</code>函数线程安全性，但是<code>compare</code>函数比较过程中，比较<code>a</code>和<code>b</code>两个变量，需要先加载<code>a</code>,<code>b</code>两个变量再比较，如果在加载过程中运行了<code>add</code>函数，导致<code>b</code>多进行了一次<code>b++</code>操作，<code>b</code>变量则大于<code>a</code>变量，如果<code>a</code>多进行一次<code>a++</code>操作，<code>a</code>变量则大于<code>b</code>变量。</p><h3 id="_1-3-问题解决" tabindex="-1"><a class="header-anchor" href="#_1-3-问题解决" aria-hidden="true">#</a> 1.3 问题解决</h3><p>应该在<code>add</code>和<code>compare</code>两个函数上都增加排他锁，保证在增加和比较过程中线程的安全性。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;compare start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">//a始终等于b吗？</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;a:{},b:{},{}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token comment">//最后的a&gt;b应该始终是false吗？</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;compare done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;right2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">right2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Interesting</span> interesting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Interesting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> interesting<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> interesting<span class="token punctuation">.</span><span class="token function">compareRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时运行不会出现<code>a</code>和<code>b</code>变量不同情况</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[16:08:07.512] [Thread-29] [INFO ] [j.c.lock.lockscope.Interesting:13  ] - add start
[16:08:07.522] [Thread-29] [INFO ] [j.c.lock.lockscope.Interesting:18  ] - add done
[16:08:07.522] [Thread-30] [INFO ] [j.c.lock.lockscope.Interesting:33  ] - compare start
[16:08:07.524] [Thread-30] [INFO ] [j.c.lock.lockscope.Interesting:40  ] - compare done
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function f(w,_){const a=p("ExternalLinkIcon");return o(),c("div",null,[d,r,i(" more "),n("div",k,[v,n("ul",null,[n("li",null,[s("参考："),n("a",m,[s("代码加锁"),t(a)])]),n("li",null,[s("仓库链接："),n("a",b,[s("《Java业务开发常见错误100例》"),t(a)]),g,s(" 转载仅用于学习，如有侵权立即删除")])])]),h])}const j=e(u,[["render",f],["__file","javalock.html.vue"]]);export{j as default};
