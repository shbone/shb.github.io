const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const l of e.keys())if(l===F){const a=o[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=u;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=o[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=o[f+y]+ +b,A=o[f+y+1]+1,w=o[p+y]+1,L=o[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,o,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const l=new Map;l.set(u.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(u),e=l}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const l of Object.keys(u)){const a=u[l],h=e._fieldIds[l],m=o.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:N(n.boost,g)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,o,u,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,o,u,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,o,u,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(u),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=k(u),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(u,d)),u=l,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),l=u.includes("#"),[a,h]=u.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>o.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(o.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in o)for(const c of o.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":54,\"nextId\":54,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-184f4da6\",\"2\":\"v-e1e3da16\",\"3\":\"v-e1e3da16#目录\",\"4\":\"v-1191cb97\",\"5\":\"v-1191cb97#目录\",\"6\":\"v-10e2b2e0\",\"7\":\"v-10e2b2e0#_1-es-存储结构\",\"8\":\"v-10e2b2e0#_1-1-es-索引分区\",\"9\":\"v-10e2b2e0#_1-2-es-shard分区\",\"10\":\"v-10e2b2e0#_2-es-框架设计\",\"11\":\"v-09041878\",\"12\":\"v-09041878#目录\",\"13\":\"v-15460eb0\",\"14\":\"v-15460eb0#_1-什么是线程池\",\"15\":\"v-15460eb0#_2-线程池运行原理\",\"16\":\"v-15460eb0#_3-threadpoolexecutor执行方法\",\"17\":\"v-1832e065\",\"18\":\"v-0c020534\",\"19\":\"v-0c020534#_1-线程锁如何锁住变量\",\"20\":\"v-0c020534#_1-1-问题展示\",\"21\":\"v-0c020534#_1-2-问题分析\",\"22\":\"v-0c020534#_1-3-问题解决\",\"23\":\"v-59a01cfa\",\"24\":\"v-59a01cfa#_1-javap实际使用\",\"25\":\"v-59a01cfa#_2-参数摘要\",\"26\":\"v-09d5491c\",\"27\":\"v-09d5491c#_1-程序计数器pc\",\"28\":\"v-09d5491c#_2-虚拟机栈-jvm-stack\",\"29\":\"v-09d5491c#_3-本地方法栈-native-method-stack\",\"30\":\"v-09d5491c#_4-堆-heap\",\"31\":\"v-09d5491c#_5-方法区-method-area\",\"32\":\"v-37c966b9\",\"33\":\"v-37c966b9#_1-maven是什么\",\"34\":\"v-37c966b9#_2-maven的作用\",\"35\":\"v-37c966b9#_3-maven-构建项目的主要环节\",\"36\":\"v-37c966b9#_4-maven-常用命令\",\"37\":\"v-d6b27a00\",\"38\":\"v-d6b27a00#_1-swagger-整合\",\"39\":\"v-d6b27a00#_1-1-maven-依赖导入\",\"40\":\"v-d6b27a00#_1-2-application-配置\",\"41\":\"v-d6b27a00#_1-2-swagger-config-配置\",\"42\":\"v-d6b27a00#_2-swagger-展示接口方法\",\"43\":\"v-893f9ff8\",\"44\":\"v-893f9ff8#_1-canal功能\",\"45\":\"v-893f9ff8#_2-canal-实践\",\"46\":\"v-893f9ff8#_2-1-下载canal\",\"47\":\"v-893f9ff8#_2-2-配置\",\"48\":\"v-893f9ff8#_2-2-1-mysql-配置\",\"49\":\"v-893f9ff8#_2-2-2-canal-配置\",\"50\":\"v-893f9ff8#_2-3-启动canal-demo\",\"51\":\"v-893f9ff8#_2-3-1-启动canal\",\"52\":\"v-893f9ff8#_2-3-2-运行maven-canal-demo项目\",\"53\":\"v-58eeea58\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,1],\"2\":[1],\"3\":[1,4],\"4\":[1],\"5\":[1,2],\"6\":[1,7],\"7\":[3,2],\"8\":[3,50],\"9\":[4,32],\"10\":[3,19],\"11\":[1],\"12\":[1,2],\"13\":[1,2],\"14\":[2,7],\"15\":[2],\"16\":[2,69],\"17\":[1,2],\"18\":[1,8],\"19\":[2],\"20\":[2,75],\"21\":[3,12],\"22\":[3,54],\"23\":[1],\"24\":[2,127],\"25\":[2,28],\"26\":[1,21],\"27\":[2,5],\"28\":[4,15],\"29\":[5,15],\"30\":[3,33],\"31\":[4,28],\"32\":[2,9],\"33\":[2,7],\"34\":[2,17],\"35\":[3,36],\"36\":[3,52],\"37\":[1],\"38\":[3,14],\"39\":[3,15],\"40\":[4,7],\"41\":[5,95],\"42\":[3,41],\"43\":[1,9],\"44\":[2,6],\"45\":[3],\"46\":[3,26],\"47\":[2,1],\"48\":[4,39],\"49\":[3,62],\"50\":[4],\"51\":[4,12],\"52\":[5,145],\"53\":[1,2]},\"averageFieldLength\":[2.3703703703703707,24.67334146267479],\"storedFields\":{\"0\":{\"h\":\"首页\"},\"1\":{\"h\":\"介绍页\",\"t\":[\"合影\"]},\"2\":{\"h\":\"分类\"},\"3\":{\"h\":\"目录\",\"t\":[\"本页面包含一些论文分享的分类：\",\"框架学习\",\"项目分享\",\"JAVA学习\"]},\"4\":{\"h\":\"框架学习\"},\"5\":{\"h\":\"目录\",\"t\":[\"本页面包含一些论文分享的分类：\",\"文章\"]},\"6\":{\"h\":\"ES分布式的结构分享\",\"t\":[\"介绍ES的分布式架构原理，包括ES存储结构和ES分布式框架设计\",\"参考：ES 的分布式架构原理能说一下么（ES 是如何实现分布式的啊）？\"]},\"7\":{\"h\":\"1. ES 存储结构\",\"t\":[\"ES集群是在多个机器上启动ES进程组成的集群。\"]},\"8\":{\"h\":\"1.1 ES 索引分区\",\"t\":[\"ES 中存储数据的基本单位是索引（index），比如说你现在要在 ES 中存储一些订单数据，你就应该在 ES 中创建一个索引 order_idx ，所有的订单数据就都写到这个索引里面去，一个索引差不多就是相当于是 mysql 里的一个数据库。\",\"ES 的索引分为五个层级\",\"Index -> Type -> Mapping -> document -> field\",\"下面是ES和MySQL的类比表格\",\"ES\",\"MySQL\",\"ES 概念理解\",\"Index\",\"schema\",\"索引是一组具有相似特征的文档的集合。\",\"Type\",\"Table\",\"类型是索引中文档的逻辑分组。例如，对于博客文章索引，可以将文章文档分为“技术”、“旅游”等不同的类型。\",\"Mapping\",\"表结构\",\"映射定义了索引中每个字段的类型和属性。例如，对于标题字段，可以定义其类型为“文本”，并指定分词器等属性\",\"document\",\"data\",\"文档是Elasticsearch中最基本的数据单元。每个文档都是一个JSON对象，包含一组键值对，代表一条记录。相当于关系型数据库中的行\",\"field\",\"field\",\"字段是文档中的数据项。例如，在博客文章文档中，标题、正文和作者等都是字段。\",\"ES具体概念理解\"]},\"9\":{\"h\":\"1.2 ES shard分区\",\"t\":[\"支持横向拓展：一个索引可以拆分成多个 shard ，每个 shard 存储部分数据\",\"比如你数据量是 3T，3 个 shard，每个 shard 就 1T 的数据，若现在数据量增加到 4T，怎么扩展，很简单，重新建一个有 4 个 shard 的索引，将数据导进\",\"增强吞吐能力：多台机器上并行分布式执行，提高了吞吐量和性能。\",\"提高读写能力： primary shard 进行读、写；replica shard 进行读。primary shard写完后，会同步到其他replica shard上。\"]},\"10\":{\"h\":\"2. ES 框架设计\",\"t\":[\" 每个ES集群都会有一个master节点 master 节点的职责：维护索引元数据、负责切换 primary shard 和 replica shard 身份，即节点上的primary shard挂了，其他replica shard替换；replica shard 挂了，master 节点会控制将缺失的 replica shard 分配过去。\",\"以上是最基本的ES分布式引擎的框架设计。\"]},\"11\":{\"h\":\"JAVA学习\"},\"12\":{\"h\":\"目录\",\"t\":[\"本页面包含一些论文分享的分类：\",\"文章\"]},\"13\":{\"h\":\"ThreadPoolExecutor线程池\",\"t\":[\"参考：什么是线程池\"]},\"14\":{\"h\":\"1. 什么是线程池\",\"t\":[\"线程池其实是一种池化的技术实现，池化技术的核心思想就是实现资源的复用，避免资源的重复创建和销毁带来的性能开销。线程池可以管理一堆线程，让线程执行完任务之后不进行销毁，而是继续去处理其它线程已经提交的任务。\"]},\"15\":{\"h\":\"2. 线程池运行原理\"},\"16\":{\"h\":\"3. ThreadPoolExecutor执行方法\",\"t\":[\"// 一共分为三步 public void execute(Runnable command) { // 首先检查提交的任务是否为null，是的话则抛出NullPointerException。 if (command == null) throw new NullPointerException(); // 获取线程池的状态，包括线程池状态（？），工作线程数量，初始数量为负数 // get获取线程的value int c = ctl.get(); // 1. 检查当前运行的工作线程数是否少于核心线程数（corePoolSize） if (workerCountOf(c) < corePoolSize) { // 少于核心线程数量则添加worker if (addWorker(command, true)) return; c = ctl.get(); } // 2. 尝试将任务添加到任务队列中 if (isRunning(c) && workQueue.offer(command)) { int recheck = ctl.get(); // 双重检查线程池的状态 if (! isRunning(recheck) && remove(command)) // 如果线程池已经停止，从队列中移除任务， && 左面为true才会执行remove函数移除任务 reject(command); // 如果线程池正在运行，但是工作线程数为0，尝试添加一个新的工作线程 else if (workerCountOf(recheck) == 0) addWorker(null, false); } // 3. 如果任务队列满了，尝试添加一个新的非核心工作线程来执行任务 else if (!addWorker(command, false)) reject(command); } \",\"private static final int CAPACITY = (1 << COUNT_BITS) - 1; private static int workerCountOf(int c) { return c & CAPACITY; } //与运算获取线程数 \",\"private static final int SHUTDOWN = 0 << COUNT_BITS; private static boolean isRunning(int c) { return c < SHUTDOWN; } //小于0，即为线程池正在运行 \",\"workQueue.offer(command) // 能够添加返回True,不能添加返回False \"]},\"17\":{\"h\":\"JAVA介绍页\",\"t\":[\"将你的个人介绍和档案放置在此处。\"]},\"18\":{\"h\":\"JAVA何时加锁\",\"t\":[\"线程代码何时适合加锁？\",\"提示\",\"参考：代码加锁\",\"仓库链接：《Java业务开发常见错误100例》 转载仅用于学习，如有侵权立即删除\"]},\"19\":{\"h\":\"1. 线程锁如何锁住变量\"},\"20\":{\"h\":\"1.1 问题展示\",\"t\":[\"@Slf4j public class Interesting { volatile int a = 1; volatile int b = 1; public synchronized void add() { log.info(\\\"add start\\\"); for (int i = 0; i < 10000; i++) { a++; b++; } log.info(\\\"add done\\\"); } public void compare() { log.info(\\\"compare start\\\"); for (int i = 0; i < 10000; i++) { //a始终等于b吗？ if (a < b) { log.info(\\\"a:{},b:{},{}\\\", a, b, a > b); //最后的a>b应该始终是false吗？ } } log.info(\\\"compare done\\\"); } } \",\"@GetMapping(\\\"wrong2\\\") public String wrong2() { Interesting interesting = new Interesting(); new Thread(() -> interesting.add()).start(); new Thread(() -> interesting.compare()).start(); return \\\"OK\\\"; } \",\"按道理，a 和 b 同样进行累加操作，应该始终相等，compare 中的第一次判断应该始终不会成立，不会输出任何日志。但是，执行代码后发现不但输出了日志，部分a和b是不相等的\",\"[15:44:10.805] [Thread-28] [INFO ] [j.c.lock.lockscope.Interesting:25 ] - a:979751,b:979754,false [15:44:10.805] [Thread-28] [INFO ] [j.c.lock.lockscope.Interesting:25 ] - a:988792,b:988793,true [15:44:10.805] [Thread-28] [INFO ] [j.c.lock.lockscope.Interesting:25 ] - a:992597,b:992596,true [15:44:10.805] [Thread-28] [INFO ] [j.c.lock.lockscope.Interesting:25 ] - a:996236,b:996237,true [15:44:10.805] [Thread-28] [INFO ] [j.c.lock.lockscope.Interesting:25 ] - a:999856,b:999857,false [15:44:10.805] [Thread-27] [INFO ] [j.c.lock.lockscope.Interesting:18 ] - add done [15:44:10.806] [Thread-28] [INFO ] [j.c.lock.lockscope.Interesting:29 ] - compare done \"]},\"21\":{\"h\":\"1.2 问题分析\",\"t\":[\"原因分析，目前尽管add函数使用synchronized关键字解决了add函数线程安全性，但是compare函数比较过程中，比较a和b两个变量，需要先加载a,b两个变量再比较，如果在加载过程中运行了add函数，导致b多进行了一次b++操作，b变量则大于a变量，如果a多进行一次a++操作，a变量则大于b变量。\"]},\"22\":{\"h\":\"1.3 问题解决\",\"t\":[\"应该在add和compare两个函数上都增加排他锁，保证在增加和比较过程中线程的安全性。\",\"public synchronized void compare() { log.info(\\\"compare start\\\"); for (int i = 0; i < 10000; i++) { //a始终等于b吗？ if (a < b) { log.info(\\\"a:{},b:{},{}\\\", a, b, a > b); //最后的a>b应该始终是false吗？ } } log.info(\\\"compare done\\\"); } \",\"@GetMapping(\\\"right2\\\") public String right2() { Interesting interesting = new Interesting(); new Thread(() -> interesting.add()).start(); new Thread(() -> interesting.compareRight()).start(); return \\\"OK\\\"; } \",\"此时运行不会出现a和b变量不同情况\",\"[16:08:07.512] [Thread-29] [INFO ] [j.c.lock.lockscope.Interesting:13 ] - add start [16:08:07.522] [Thread-29] [INFO ] [j.c.lock.lockscope.Interesting:18 ] - add done [16:08:07.522] [Thread-30] [INFO ] [j.c.lock.lockscope.Interesting:33 ] - compare start [16:08:07.524] [Thread-30] [INFO ] [j.c.lock.lockscope.Interesting:40 ] - compare done \"]},\"23\":{\"h\":\"javap使用\"},\"24\":{\"h\":\"1. javap实际使用\",\"t\":[\"javap可以用于反编译和查看编译器编译后的字节码。平时一般用javap -c比较多，该命令用于列出每个方法所执行的JVM指令，并显示每个方法的字节码的实际作用。可以通过字节码和源代码的对比，深入分析java的编译原理，了解和解决各种Java原理级别的问题。\",\"示例\",\"构造一个java文件\",\"java文件 public class ConstPool { public static void main(String[] args) { System.out.println(\\\"ConstPool.main\\\"); } } \",\"javac ConstPool.java 执行生成ConstPool.class二进制文件\",\"javap -c ConstPool.class 反编译展示java字节码文件\",\"提示\",\"二进制.class文件的组成\",\"类基本信息\",\"常量池\",\"类方法定义\",\"Classfile /home/root1/sunhb/selflearn/SunSpring/src/main/java/com/sunhb/sunspring/JVM/ConstPool.class Last modified 2023-9-3; size 450 bytes MD5 checksum 1622d49f4c56fbb2f0292f5a2bfafc31 Compiled from \\\"ConstPool.java\\\" public class com.sunhb.sunspring.JVM.ConstPool minor version: 0 major version: 52 flags: ACC_PUBLIC, ACC_SUPER Constant pool: #1 = Methodref #6.#15 // java/lang/Object.\\\"<init>\\\":()V #2 = Fieldref #16.#17 // java/lang/System.out:Ljava/io/PrintStream; #3 = String #18 // ConstPool.main #4 = Methodref #19.#20 // java/io/PrintStream.println:(Ljava/lang/String;)V #5 = Class #21 // com/sunhb/sunspring/JVM/ConstPool #6 = Class #22 // java/lang/Object #7 = Utf8 <init> #8 = Utf8 ()V #9 = Utf8 Code #10 = Utf8 LineNumberTable #11 = Utf8 main #12 = Utf8 ([Ljava/lang/String;)V #13 = Utf8 SourceFile #14 = Utf8 ConstPool.java #15 = NameAndType #7:#8 // \\\"<init>\\\":()V #16 = Class #23 // java/lang/System #17 = NameAndType #24:#25 // out:Ljava/io/PrintStream; #18 = Utf8 ConstPool.main #19 = Class #26 // java/io/PrintStream #20 = NameAndType #27:#28 // println:(Ljava/lang/String;)V #21 = Utf8 com/sunhb/sunspring/JVM/ConstPool #22 = Utf8 java/lang/Object #23 = Utf8 java/lang/System #24 = Utf8 out #25 = Utf8 Ljava/io/PrintStream; #26 = Utf8 java/io/PrintStream #27 = Utf8 println #28 = Utf8 (Ljava/lang/String;)V { public com.sunhb.sunspring.JVM.ConstPool(); descriptor: ()V flags: ACC_PUBLIC Code: stack=1, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object.\\\"<init>\\\":()V 4: return LineNumberTable: line 8: 0 public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: ACC_PUBLIC, ACC_STATIC Code: stack=2, locals=1, args_size=1 0: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream; 3: ldc #3 // String ConstPool.main 5: invokevirtual #4 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 8: return LineNumberTable: line 10: 0 line 11: 8 } SourceFile: \\\"ConstPool.java\\\" \"]},\"25\":{\"h\":\"2. 参数摘要\",\"t\":[\"-help 帮助 -l 输出行和变量的表 -public 只输出public方法和域 -protected 只输出public和protected类和成员 -package 只输出包，public和protected类和成员，这是默认的 -p -private 输出所有类和成员 -s 输出内部类型签名 -c 输出分解后的代码，例如，类中每一个方法内，包含java字节码的指令， -verbose 输出栈大小，方法参数的个数 -constants 输出静态final常量 \"]},\"26\":{\"h\":\"JVM内存结构\",\"t\":[\"Java Virtual Machine(JAVA虚拟机，JVM)内存结构, 包括 程序计数器，虚拟机栈，本地方法栈，方法区，堆几部分组成。JVM的使用是为保证Java程序跨平台运行，在操作系统层次之上构建的虚拟机，以便实现一次编译，到处运行。\",\"提示\",\"参考：JVM 核心知识点总结\",\"图1 JVM框架图\"]},\"27\":{\"h\":\"1. 程序计数器PC\",\"t\":[\"程序计数器用于存放执行指令的地方，可以看成当前线程所执行的字节码的信号指示器。 在线程的虚拟机栈中存储。程序计数器用来确定下一条指令执行的位置。\"]},\"28\":{\"h\":\"2. 虚拟机栈 JVM Stack\",\"t\":[\"线程运行需要的内存空间，一个栈由多个栈帧组成，一个栈帧对应一个线程，栈帧的生命周期与线程相互对应，保存着参数、返回值、局部变量信息。\",\"提示\",\"如果线程请求的栈深度大于虚拟机所允许的栈深度，将抛出StackOverflowError异常；\",\"如果 Java 虚拟机栈的容量允许动态扩展，当栈扩展时如果无法申请到足够的内存会抛出 OutOfMemoryError异常\"]},\"29\":{\"h\":\"3. 本地方法栈 Native Method Stack\",\"t\":[\"本地方法栈（Native Method Stacks）与虚拟机栈类似，其区别在于：Java 虚拟机栈是为虚拟机执行 Java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务，线程私有的。\"]},\"30\":{\"h\":\"4. 堆 Heap\",\"t\":[\"Java 堆（Java Heap）是虚拟机所管理的最大一块的内存空间，它被所有线程所共享，用于存放对象实例。Java 堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为是连续的。Java 堆可以被实现成固定大小的，也可以是可扩展的，当前大多数主流的虚拟机都是按照可扩展来实现的，即可以通过最大值参数 -Xmx 和最小值参数 -Xms 进行设定。如果 Java 堆中没有足够的内存来完成实例分配，并且堆也无法再扩展时，Java 虚拟机将会抛出 OutOfMemoryError 异常。\",\"提示\",\"jps 查看java进程\",\"系统中查看java进程\",\"jmap 查看Heap占用\",\"jmap -heap 进程号\",\"jconsole 查看JVM内存占用情况\",\"图形化界面连续监控\"]},\"31\":{\"h\":\"5. 方法区 Method area\",\"t\":[\"方法区（Method Area）也是各个线程共享的内存区域，它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。方法区也被称为 “非堆”，目的是与 Java 堆进行区分。《Java 虚拟机规范》规定，如果方法区无法满足新的内存分配需求时，将会抛出 OutOfMemoryError 异常。\",\"运行时常量池（Runtime Constant Pool）是方法区的一部分，用于存放常量池表（Constant Pool Table），常量池表中存放了编译期生成的各种符号字面量和符号引用。\"]},\"32\":{\"h\":\"Maven 自动化构建工具分享\",\"t\":[\"本篇文章分享Maven的作用和自动化构建项目的常见方法，如clean,install,package等命令\",\"原文：面试官问我maven package和install的区别\",\"如有侵权，立即删除\"]},\"33\":{\"h\":\"1. Maven是什么\",\"t\":[\"Maven是Apache软件基金会唯一维护的一款自动化构建工具，专注于服务Java平台的项目构建和依赖管理。\",\"Maven是基于项目对象模型（POM），可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。\"]},\"34\":{\"h\":\"2. Maven的作用\",\"t\":[\"管理jar包之间的依赖关系 \",\"Maven 可以替我们自动的将当前 jar 包所依赖的其他所有 jar 包全部导入进来\",\"获取第三方jar包 \",\"Maven 提供了一个完全统一规范的 jar 包管理体系，只需要在项目中以坐标的方式依赖一个 jar 包，Maven 就会自动从中央仓库进行下载到本地仓库\",\"将项目拆分成多个工程模块\",\"构建项目（打包，编译等）\"]},\"35\":{\"h\":\"3. Maven 构建项目的主要环节\",\"t\":[\"清理（clean）：删除以前的编译结果（删除target），为重新编译做好准备\",\"编译（compile）：将Java 源程序编译为字节码文件，生成target目录。\",\"测试（test）：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性\",\"打包（package）：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java 工程对应 jar 包，Web工程对应 war 包。package包含了compile命令的过程。\",\"安装（install）：在 Maven 环境下特指将打包的结果——jar 包或 war 包安装到本地仓库中。\",\"部署（deploy）：将打包的结果部署到远程仓库或将 war 包部署到服务器上运行。\"]},\"36\":{\"h\":\"4. Maven 常用命令\",\"t\":[\"mvn -version/-v 显示版本信息 mvn clean 清空生成的文件 mvn compile 编译 mvn test 编译并测试 mvn package 生成target目录，编译、测试代码，生成测试报告，生成jar/war文件 mvn site 生成项目相关信息的网站 mvn clean compile 表示先运行清理之后运行编译，会将代码编译到target文件夹中 mvn clean package 运行清理和打包 mvn clean install 运行清理和安装，会将打好的包安装到本地仓库中，以便其他的项目可以调用 mvn clean deploy 运行清理和发布 \",\"mvn clean package依次执行了clean、resources、compile、testResources、testCompile、test、jar(打包)等７个阶段。\",\"mvn clean install依次执行了clean、resources、compile、testResources、testCompile、test、jar(打包)、install等8个阶段。\",\"mvn clean deploy依次执行了clean、resources、compile、testResources、testCompile、test、jar(打包)、install、deploy等９个阶段。\",\"提示\",\"-DskipTests跟-Dmaven.test.skip=true的区别\",\"-DskipTests\",\"不执行测试用例，但编译测试用例类生成相应的class文件至target/test-classes下。\",\"-Dmaven.test.skip=true\",\"不执行测试用例，也不编译测试用例类。\",\"一般建议使用第二种，直接忽略测试的编译，如下：\",\"mvn clean package -Dmaven.test.skip=true \"]},\"37\":{\"h\":\"Swagger接口文档分享\"},\"38\":{\"h\":\"1. Swagger 整合\",\"t\":[\"swagger官网: https://swagger.io/ Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。\"]},\"39\":{\"h\":\"1.1 maven 依赖导入\",\"t\":[\"<dependency> <groupId>io.springfox</groupId> <artifactId>springfox-boot-starter</artifactId> <version>3.0.0</version> </dependency> \"]},\"40\":{\"h\":\"1.2 application 配置\",\"t\":[\"springfox: documentation: swagger-ui: enabled: true \"]},\"41\":{\"h\":\"1.2 Swagger Config 配置\",\"t\":[\"import io.swagger.annotations.ApiOperation; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.http.HttpMethod; import springfox.documentation.builders.*; import springfox.documentation.oas.annotations.EnableOpenApi; import springfox.documentation.schema.ScalarType; import springfox.documentation.service.*; import springfox.documentation.spi.DocumentationType; import springfox.documentation.spring.web.plugins.Docket; import java.util.ArrayList; import java.util.List; /** * @author: SunHB * @createTime: 2023/09/24 上午11:00 * @description: */ @Configuration @EnableOpenApi public class Swagger3Config { @Bean public Docket createRestApi() { //返回文档摘要信息 return new Docket(DocumentationType.OAS_30) .apiInfo(apiInfo()) .select() .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)) //.apis(RequestHandlerSelectors.basePackage(\\\"com.ytkj.controller\\\")) .paths(PathSelectors.any()) .build() .globalRequestParameters(getGlobalRequestParameters()) .globalResponses(HttpMethod.GET, getGlobalResponseMessage()) .globalResponses(HttpMethod.POST, getGlobalResponseMessage()); } /** * 生成接口信息，包括标题、联系人等 */ private ApiInfo apiInfo() { return new ApiInfoBuilder() .title(\\\"yantu测试接口文档\\\") .description(\\\"如有疑问，可联系孙鸿博\\\") .version(\\\"1.0\\\") .build(); } /** * 封装全局通用参数 */ private List<RequestParameter> getGlobalRequestParameters() { List<RequestParameter> parameters = new ArrayList<>(); return parameters; } /** * 封装通用响应信息 */ private List<Response> getGlobalResponseMessage() { List<Response> responseList = new ArrayList<>(); responseList.add(new ResponseBuilder().code(\\\"404\\\").description(\\\"未找到资源\\\").build()); return responseList; } } \"]},\"42\":{\"h\":\"2. Swagger 展示接口方法\",\"t\":[\"@Api：用在类上，说明该类的作用。\",\"@ApiOperation：注解来给API增加方法说明。\",\"@ApiImplicitParams : 用在方法上包含一组参数说明。\",\"@ApiImplicitParam：用来注解来给方法入参增加说明。\",\"@ApiResponses：用于表示一组响应\",\"@RestController @Slf4j @RequestMapping(\\\"/test\\\") @Api(tags = \\\"测试接口管理\\\") public class TestController \",\"@ApiOperation(value = \\\"主控测试接口\\\") @PostMapping(\\\"/chat\\\") @CrossOrigin public Result<Map> testChat \",\"@ApiOperation(value = \\\"文档模块测试接口\\\") @PostMapping(\\\"v1/docQA\\\") @CrossOrigin public Result docQA \",\"访问： http://localhost:port/swagger-ui/index.html\"]},\"43\":{\"h\":\"Canal监听MySQL增量数据\",\"t\":[\"Canal,主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费服务。 分享主要围绕如何使用Canal快速搭建Mysql增量数据订阅服务，针对Mysql表的增删改查服务进行监听。\",\"提示\",\"代码仓库视屏讲解\"]},\"44\":{\"h\":\"1. Canal功能\",\"t\":[\"1.1 数据同步 1.2 数据展示 1.3 低版本迁移高版本\"]},\"45\":{\"h\":\"2. Canal 实践\"},\"46\":{\"h\":\"2.1 下载Canal\",\"t\":[\"canal-1.1.7下载\",\"选择canal.deployer-1.1.7.tar.gz下载\",\"提示\",\"canal的各个组件的用途各不相同，下面分别介绍下： canal-deploy：用于监听MySQL的binlog，是一个伪装的MySQL从库，只负责从MySQL主库接收数据，不做处理。 canal-adapter：canal的客户端，从canal-deploy中获取数据，然后同步数据到目标数据源。 canal-admin：为canal提供整体配置管理、节点运维等面向运维的功能，提供相对友好的WebUI操作界面，方便更多用户快速和安全的操作\"]},\"47\":{\"h\":\"2.2 配置\",\"t\":[\"官方参考文档\"]},\"48\":{\"h\":\"2.2.1 Mysql 配置\",\"t\":[\"对于自建 MySQL , 需要先开启 Binlog 写入功能，配置 binlog-format 为 ROW 模式，my.cnf 中配置如下\",\"[mysqld] log-bin=mysql-bin # 开启 binlog binlog-format=ROW # 选择 ROW 模式 server_id=1 # 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复 \",\"使用命令查看是否打开binlog模式\",\"show variables like `log_bin`;# 显示ON 即为打开binlog模式 \"]},\"49\":{\"h\":\"2.2.2 Canal 配置\",\"t\":[\"解压Canal\",\"conf文件夹下修改 conf/example/instance.properties 重点修改canal.instance.dbUsername,canal.instance.dbPassword\",\"## mysql serverId , v1.0.26+ will autoGen ## v1.0.26版本后会自动生成slaveId，所以可以不用配置 # canal.instance.mysql.slaveId=0 # 数据库地址 canal.instance.master.address=127.0.0.1:3306 # binlog日志名称 canal.instance.master.journal.name=mysql-bin.000001 # mysql主库链接时起始的binlog偏移量 canal.instance.master.position=154 # mysql主库链接时起始的binlog的时间戳 canal.instance.master.timestamp= canal.instance.master.gtid= # username/password # 在MySQL服务器授权的账号密码 canal.instance.dbUsername=xxx canal.instance.dbPassword=xxx # 字符集 canal.instance.connectionCharset = UTF-8 # enable druid Decrypt database password canal.instance.enableDruid=false # table regex .*\\\\\\\\..*表示监听所有表 也可以写具体的表名，用，隔开 canal.instance.filter.regex=.*\\\\\\\\..* # mysql 数据解析表的黑名单，多个表用，隔开 canal.instance.filter.black.regex= \"]},\"50\":{\"h\":\"2.3 启动Canal Demo\"},\"51\":{\"h\":\"2.3.1 启动Canal\",\"t\":[\"bin 目录下 start.sh (Linux系统)或者start.bat(Windows系统)\",\"./start.sh \",\"jps 命令可以查看是否正常启动 正常启动显示xxxx CanalLauncher\"]},\"52\":{\"h\":\"2.3.2 运行Maven Canal Demo项目\",\"t\":[\" <dependency> <groupId>com.alibaba.otter</groupId> <artifactId>canal.client</artifactId> <version>1.1.0</version> </dependency> \",\"public static void main(String[] args) throws InvalidProtocolBufferException { //1.获取 canal 连接对象 CanalConnector canalConnector = CanalConnectors.newSingleConnector(new InetSocketAddress(\\\"localhost\\\", 11111), \\\"example\\\", \\\"\\\", \\\"\\\"); while (true) { //2.获取连接 canalConnector.connect(); //3.指定要监控的数据库 canalConnector.subscribe(\\\"canal_demo.*\\\"); //4.获取 Message // 一个Message 对应一个Sql语句 Message message = canalConnector.get(100); List<CanalEntry.Entry> entries = message.getEntries(); if (entries.size() <= 0) { System.out.println(\\\"没有数据，休息一会\\\"); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } else { for (CanalEntry.Entry entry : entries) { // 获取表名 String tableName = entry.getHeader().getTableName(); // Entry 类型 CanalEntry.EntryType entryType = entry.getEntryType(); // 判断 entryType 是否为 ROWDATA if (CanalEntry.EntryType.ROWDATA.equals(entryType)) { // 序列化数据 ByteString storeValue = entry.getStoreValue(); // 反序列化 CanalEntry.RowChange rowChange = CanalEntry.RowChange.parseFrom(storeValue); // 获取事件类型 CanalEntry.EventType eventType = rowChange.getEventType(); // 获取具体的数据 List<CanalEntry.RowData> rowDatasList = rowChange.getRowDatasList(); // 遍历并打印数据 for (CanalEntry.RowData rowData : rowDatasList) { List<CanalEntry.Column> beforeColumnsList = rowData.getBeforeColumnsList(); Map<String, Object> bMap = new HashMap<String,Object>(); for (CanalEntry.Column column : beforeColumnsList) { bMap.put(column.getName(), column.getValue()); } Map<String, Object> afMap = new HashMap<String,Object>(); List<CanalEntry.Column> afterColumnsList = rowData.getAfterColumnsList(); for (CanalEntry.Column column : afterColumnsList) { afMap.put(column.getName(), column.getValue()); } System.out.println(\\\"表名:\\\" + tableName + \\\",操作类型:\\\" + eventType); System.out.println(\\\"改前:\\\" + bMap ); System.out.println(\\\"改后:\\\" + afMap ); } } } } } } \",\"测试：修改更新数据\",\"UPDATE USER set name = \\\"ssskkk\\\" where name = \\\"zhangsan\\\"; \",\"修改数据后的日志打印\",\"没有数据，休息一会 没有数据，休息一会 没有数据，休息一会 表名:USER,操作类型:UPDATE 改前:{name=zhangsan, id=4, age=18} 改后:{name=ssskkk, id=4, age=18} 表名:USER,操作类型:UPDATE 改前:{name=zhangsan, id=5, age=188} 改后:{name=ssskkk, id=5, age=188} \"]},\"53\":{\"h\":\"项目介绍页\",\"t\":[\"将你的个人介绍和档案放置在此处。\"]}},\"dirtCount\":0,\"index\":[[\"项目介绍页\",{\"0\":{\"53\":1}}],[\"项目分享\",{\"1\":{\"3\":1}}],[\"修改数据后的日志打印\",{\"1\":{\"52\":1}}],[\"修改更新数据\",{\"1\":{\"52\":1}}],[\"zhangsan\",{\"1\":{\"52\":1}}],[\"改后\",{\"1\":{\"52\":3}}],[\"改前\",{\"1\":{\"52\":3}}],[\"操作类型\",{\"1\":{\"52\":3}}],[\"+\",{\"1\":{\"52\":5}}],[\"遍历并打印数据\",{\"1\":{\"52\":1}}],[\"反序列化\",{\"1\":{\"52\":1}}],[\"反编译展示java字节码文件\",{\"1\":{\"24\":1}}],[\"序列化数据\",{\"1\":{\"52\":1}}],[\"判断\",{\"1\":{\"52\":1}}],[\"休息一会\",{\"1\":{\"52\":4}}],[\"没有数据\",{\"1\":{\"52\":4}}],[\"对应一个sql语句\",{\"1\":{\"52\":1}}],[\"对于自建\",{\"1\":{\"48\":1}}],[\"对于标题字段\",{\"1\":{\"8\":1}}],[\"对于博客文章索引\",{\"1\":{\"8\":1}}],[\"指定要监控的数据库\",{\"1\":{\"52\":1}}],[\"连接对象\",{\"1\":{\"52\":1}}],[\"正常启动显示xxxx\",{\"1\":{\"51\":1}}],[\"正文和作者等都是字段\",{\"1\":{\"8\":1}}],[\"命令可以查看是否正常启动\",{\"1\":{\"51\":1}}],[\"或者start\",{\"1\":{\"51\":1}}],[\"启动canal\",{\"0\":{\"50\":1,\"51\":1}}],[\"多个表用\",{\"1\":{\"49\":1}}],[\"多台机器上并行分布式执行\",{\"1\":{\"9\":1}}],[\"隔开\",{\"1\":{\"49\":2}}],[\"字符集\",{\"1\":{\"49\":1}}],[\"字段是文档中的数据项\",{\"1\":{\"8\":1}}],[\"所以可以不用配置\",{\"1\":{\"49\":1}}],[\"所有的订单数据就都写到这个索引里面去\",{\"1\":{\"8\":1}}],[\"解压canal\",{\"1\":{\"49\":1}}],[\"显示on\",{\"1\":{\"48\":1}}],[\"显示版本信息\",{\"1\":{\"36\":1}}],[\"`log\",{\"1\":{\"48\":1}}],[\"使用命令查看是否打开binlog模式\",{\"1\":{\"48\":1}}],[\"重点修改canal\",{\"1\":{\"49\":1}}],[\"重复\",{\"1\":{\"48\":1}}],[\"重新建一个有\",{\"1\":{\"9\":1}}],[\"需要定义\",{\"1\":{\"48\":1}}],[\"需要先开启\",{\"1\":{\"48\":1}}],[\"需要先加载a\",{\"1\":{\"21\":1}}],[\"选择\",{\"1\":{\"48\":1}}],[\"选择canal\",{\"1\":{\"46\":1}}],[\"开启\",{\"1\":{\"48\":1}}],[\"模式\",{\"1\":{\"48\":2}}],[\"官方参考文档\",{\"1\":{\"47\":1}}],[\"方便更多用户快速和安全的操作\",{\"1\":{\"46\":1}}],[\"方法服务\",{\"1\":{\"29\":1}}],[\"方法\",{\"1\":{\"29\":1}}],[\"方法区也被称为\",{\"1\":{\"31\":1}}],[\"方法区\",{\"0\":{\"31\":1},\"1\":{\"26\":1,\"31\":1}}],[\"方法参数的个数\",{\"1\":{\"25\":1}}],[\"为\",{\"1\":{\"48\":1}}],[\"为canal提供整体配置管理\",{\"1\":{\"46\":1}}],[\"为重新编译做好准备\",{\"1\":{\"35\":1}}],[\"然后同步数据到目标数据源\",{\"1\":{\"46\":1}}],[\"从canal\",{\"1\":{\"46\":1}}],[\"从队列中移除任务\",{\"1\":{\"16\":1}}],[\"下面分别介绍下\",{\"1\":{\"46\":1}}],[\"下面是es和mysql的类比表格\",{\"1\":{\"8\":1}}],[\"下载canal\",{\"0\":{\"46\":1}}],[\"实践\",{\"0\":{\"45\":1}}],[\"低版本迁移高版本\",{\"1\":{\"44\":1}}],[\"数据解析表的黑名单\",{\"1\":{\"49\":1}}],[\"数据库地址\",{\"1\":{\"49\":1}}],[\"数据库增量日志解析\",{\"1\":{\"43\":1}}],[\"数据展示\",{\"1\":{\"44\":1}}],[\"数据同步\",{\"1\":{\"44\":1}}],[\"针对mysql表的增删改查服务进行监听\",{\"1\":{\"43\":1}}],[\"针对项目中的关键点进行测试\",{\"1\":{\"35\":1}}],[\"主要用途是基于\",{\"1\":{\"43\":1}}],[\"主控测试接口\",{\"1\":{\"42\":1}}],[\"访问\",{\"1\":{\"42\":1}}],[\"注解来给api增加方法说明\",{\"1\":{\"42\":1}}],[\"说明该类的作用\",{\"1\":{\"42\":1}}],[\"用\",{\"1\":{\"49\":1}}],[\"用来注解来给方法入参增加说明\",{\"1\":{\"42\":1}}],[\"用在方法上包含一组参数说明\",{\"1\":{\"42\":1}}],[\"用在类上\",{\"1\":{\"42\":1}}],[\"用于监听mysql的binlog\",{\"1\":{\"46\":1}}],[\"用于表示一组响应\",{\"1\":{\"42\":1}}],[\"用于生成\",{\"1\":{\"38\":1}}],[\"用于存放常量池表\",{\"1\":{\"31\":1}}],[\"用于存放对象实例\",{\"1\":{\"30\":1}}],[\"展示接口方法\",{\"0\":{\"42\":1}}],[\"未找到资源\",{\"1\":{\"41\":1}}],[\"封装通用响应信息\",{\"1\":{\"41\":1}}],[\"封装全局通用参数\",{\"1\":{\"41\":1}}],[\"可联系孙鸿博\",{\"1\":{\"41\":1}}],[\"可以替我们自动的将当前\",{\"1\":{\"34\":1}}],[\"可以通过一小段描述信息来管理项目的构建\",{\"1\":{\"33\":1}}],[\"可以通过字节码和源代码的对比\",{\"1\":{\"24\":1}}],[\"可以看成当前线程所执行的字节码的信号指示器\",{\"1\":{\"27\":1}}],[\"可以定义其类型为\",{\"1\":{\"8\":1}}],[\"可以将文章文档分为\",{\"1\":{\"8\":1}}],[\"yantu测试接口文档\",{\"1\":{\"41\":1}}],[\"ytkj\",{\"1\":{\"41\":1}}],[\"联系人等\",{\"1\":{\"41\":1}}],[\"返回文档摘要信息\",{\"1\":{\"41\":1}}],[\"返回值\",{\"1\":{\"28\":1}}],[\"上午11\",{\"1\":{\"41\":1}}],[\"user\",{\"1\":{\"52\":3}}],[\"username\",{\"1\":{\"49\":1}}],[\"update\",{\"1\":{\"52\":3}}],[\"utf\",{\"1\":{\"49\":1}}],[\"utf8\",{\"1\":{\"24\":17}}],[\"util\",{\"1\":{\"41\":2}}],[\"ui\",{\"1\":{\"40\":1,\"42\":1}}],[\"配置\",{\"0\":{\"40\":1,\"41\":1,\"47\":1,\"48\":1,\"49\":1},\"1\":{\"48\":2}}],[\"gtid=\",{\"1\":{\"49\":1}}],[\"gz下载\",{\"1\":{\"46\":1}}],[\"globalresponses\",{\"1\":{\"41\":2}}],[\"globalrequestparameters\",{\"1\":{\"41\":1}}],[\"groupid>\",{\"1\":{\"39\":1,\"52\":1}}],[\"getaftercolumnslist\",{\"1\":{\"52\":1}}],[\"getvalue\",{\"1\":{\"52\":2}}],[\"getname\",{\"1\":{\"52\":2}}],[\"getbeforecolumnslist\",{\"1\":{\"52\":1}}],[\"getrowdataslist\",{\"1\":{\"52\":1}}],[\"geteventtype\",{\"1\":{\"52\":1}}],[\"getentrytype\",{\"1\":{\"52\":1}}],[\"getentries\",{\"1\":{\"52\":1}}],[\"getstorevalue\",{\"1\":{\"52\":1}}],[\"getstatic\",{\"1\":{\"24\":1}}],[\"gettablename\",{\"1\":{\"52\":1}}],[\"getheader\",{\"1\":{\"52\":1}}],[\"getglobalresponsemessage\",{\"1\":{\"41\":3}}],[\"getglobalrequestparameters\",{\"1\":{\"41\":2}}],[\"getmapping\",{\"1\":{\"20\":1,\"22\":1}}],[\"get\",{\"1\":{\"16\":3,\"41\":1,\"52\":1}}],[\"get获取线程的value\",{\"1\":{\"16\":1}}],[\"依赖导入\",{\"0\":{\"39\":1}}],[\"风格的\",{\"1\":{\"38\":1}}],[\"调用和可视化\",{\"1\":{\"38\":1}}],[\"描述\",{\"1\":{\"38\":1}}],[\"整合\",{\"0\":{\"38\":1}}],[\"直接忽略测试的编译\",{\"1\":{\"36\":1}}],[\"等７个阶段\",{\"1\":{\"36\":1}}],[\"等不同的类型\",{\"1\":{\"8\":1}}],[\"运行maven\",{\"0\":{\"52\":1}}],[\"运行清理和发布\",{\"1\":{\"36\":1}}],[\"运行清理和安装\",{\"1\":{\"36\":1}}],[\"运行清理和打包\",{\"1\":{\"36\":1}}],[\"运行时常量池\",{\"1\":{\"31\":1}}],[\"会将打好的包安装到本地仓库中\",{\"1\":{\"36\":1}}],[\"会将代码编译到target文件夹中\",{\"1\":{\"36\":1}}],[\"会同步到其他replica\",{\"1\":{\"9\":1}}],[\"表名\",{\"1\":{\"52\":3}}],[\"表示监听所有表\",{\"1\":{\"49\":1}}],[\"表示先运行清理之后运行编译\",{\"1\":{\"36\":1}}],[\"表结构\",{\"1\":{\"8\":1}}],[\"生成接口信息\",{\"1\":{\"41\":1}}],[\"生成项目相关信息的网站\",{\"1\":{\"36\":1}}],[\"生成jar\",{\"1\":{\"36\":1}}],[\"生成测试报告\",{\"1\":{\"36\":1}}],[\"生成target目录\",{\"1\":{\"35\":1,\"36\":1}}],[\"清空生成的文件\",{\"1\":{\"36\":1}}],[\"清理\",{\"1\":{\"35\":1}}],[\"常用命令\",{\"0\":{\"36\":1}}],[\"常量\",{\"1\":{\"31\":1}}],[\"常量池表中存放了编译期生成的各种符号字面量和符号引用\",{\"1\":{\"31\":1}}],[\"常量池\",{\"1\":{\"24\":1}}],[\"部署\",{\"1\":{\"35\":1}}],[\"部分a和b是不相等的\",{\"1\":{\"20\":1}}],[\"环境下特指将打包的结果\",{\"1\":{\"35\":1}}],[\"安装\",{\"1\":{\"35\":1}}],[\"工程对应\",{\"1\":{\"35\":1}}],[\"工作线程数量\",{\"1\":{\"16\":1}}],[\"确保项目在迭代开发过程中关键点的正确性\",{\"1\":{\"35\":1}}],[\"测试接口管理\",{\"1\":{\"42\":1}}],[\"测试代码\",{\"1\":{\"36\":1}}],[\"测试\",{\"1\":{\"35\":1,\"52\":1}}],[\"源程序编译为字节码文件\",{\"1\":{\"35\":1}}],[\"编译并测试\",{\"1\":{\"36\":1}}],[\"编译\",{\"1\":{\"35\":1,\"36\":2}}],[\"编译等\",{\"1\":{\"34\":1}}],[\"删除target\",{\"1\":{\"35\":1}}],[\"删除以前的编译结果\",{\"1\":{\"35\":1}}],[\"打包\",{\"1\":{\"34\":1,\"35\":1,\"36\":3}}],[\"构建项目的主要环节\",{\"0\":{\"35\":1}}],[\"构建项目\",{\"1\":{\"34\":1}}],[\"构造一个java文件\",{\"1\":{\"24\":1}}],[\"只负责从mysql主库接收数据\",{\"1\":{\"46\":1}}],[\"只需要在项目中以坐标的方式依赖一个\",{\"1\":{\"34\":1}}],[\"只输出包\",{\"1\":{\"25\":1}}],[\"只输出public和protected类和成员\",{\"1\":{\"25\":1}}],[\"只输出public方法和域\",{\"1\":{\"25\":1}}],[\"获取具体的数据\",{\"1\":{\"52\":1}}],[\"获取事件类型\",{\"1\":{\"52\":1}}],[\"获取表名\",{\"1\":{\"52\":1}}],[\"获取连接\",{\"1\":{\"52\":1}}],[\"获取\",{\"1\":{\"52\":2}}],[\"获取第三方jar包\",{\"1\":{\"34\":1}}],[\"获取线程池的状态\",{\"1\":{\"16\":1}}],[\"管理jar包之间的依赖关系\",{\"1\":{\"34\":1}}],[\"报告和文档的软件项目管理工具\",{\"1\":{\"33\":1}}],[\"专注于服务java平台的项目构建和依赖管理\",{\"1\":{\"33\":1}}],[\"立即删除\",{\"1\":{\"32\":1}}],[\"面试官问我maven\",{\"1\":{\"32\":1}}],[\"原文\",{\"1\":{\"32\":1}}],[\"原因分析\",{\"1\":{\"21\":1}}],[\"自动化构建工具分享\",{\"0\":{\"32\":1}}],[\"规定\",{\"1\":{\"31\":1}}],[\"非堆\",{\"1\":{\"31\":1}}],[\"静态变量\",{\"1\":{\"31\":1}}],[\"它用于存储已被虚拟机加载的类型信息\",{\"1\":{\"31\":1}}],[\"它被所有线程所共享\",{\"1\":{\"30\":1}}],[\"图形化界面连续监控\",{\"1\":{\"30\":1}}],[\"图1\",{\"1\":{\"26\":1}}],[\"进程号\",{\"1\":{\"30\":1}}],[\"进行设定\",{\"1\":{\"30\":1}}],[\"进行读\",{\"1\":{\"9\":2}}],[\"查看jvm内存占用情况\",{\"1\":{\"30\":1}}],[\"查看java进程\",{\"1\":{\"30\":1}}],[\"查看heap占用\",{\"1\":{\"30\":1}}],[\"系统中查看java进程\",{\"1\":{\"30\":1}}],[\"异常\",{\"1\":{\"30\":1,\"31\":1}}],[\"虚拟机规范\",{\"1\":{\"31\":1}}],[\"虚拟机将会抛出\",{\"1\":{\"30\":1}}],[\"虚拟机栈是为虚拟机执行\",{\"1\":{\"29\":1}}],[\"虚拟机栈的容量允许动态扩展\",{\"1\":{\"28\":1}}],[\"虚拟机栈\",{\"0\":{\"28\":1},\"1\":{\"26\":1}}],[\"xms\",{\"1\":{\"30\":1}}],[\"xmx\",{\"1\":{\"30\":1}}],[\"当前大多数主流的虚拟机都是按照可扩展来实现的\",{\"1\":{\"30\":1}}],[\"当栈扩展时如果无法申请到足够的内存会抛出\",{\"1\":{\"28\":1}}],[\"也可以写具体的表名\",{\"1\":{\"49\":1}}],[\"也可以是可扩展的\",{\"1\":{\"30\":1}}],[\"也不编译测试用例类\",{\"1\":{\"36\":1}}],[\"也是各个线程共享的内存区域\",{\"1\":{\"31\":1}}],[\"也就是字节码\",{\"1\":{\"29\":1}}],[\"但编译测试用例类生成相应的class文件至target\",{\"1\":{\"36\":1}}],[\"但在逻辑上它应该被视为是连续的\",{\"1\":{\"30\":1}}],[\"但是compare函数比较过程中\",{\"1\":{\"21\":1}}],[\"但是\",{\"1\":{\"20\":1}}],[\"但是工作线程数为0\",{\"1\":{\"16\":1}}],[\"堆进行区分\",{\"1\":{\"31\":1}}],[\"堆中没有足够的内存来完成实例分配\",{\"1\":{\"30\":1}}],[\"堆可以被实现成固定大小的\",{\"1\":{\"30\":1}}],[\"堆可以处于物理上不连续的内存空间中\",{\"1\":{\"30\":1}}],[\"堆\",{\"0\":{\"30\":1},\"1\":{\"30\":1}}],[\"堆几部分组成\",{\"1\":{\"26\":1}}],[\"而本地方法栈则是为虚拟机使用到的本地\",{\"1\":{\"29\":1}}],[\"而是继续去处理其它线程已经提交的任务\",{\"1\":{\"14\":1}}],[\"服务\",{\"1\":{\"29\":1,\"38\":1}}],[\"其区别在于\",{\"1\":{\"29\":1}}],[\"其他replica\",{\"1\":{\"10\":1}}],[\"与虚拟机栈类似\",{\"1\":{\"29\":1}}],[\"与运算获取线程数\",{\"1\":{\"16\":1}}],[\"局部变量信息\",{\"1\":{\"28\":1}}],[\"保存着参数\",{\"1\":{\"28\":1}}],[\"保证在增加和比较过程中线程的安全性\",{\"1\":{\"22\":1}}],[\"栈帧的生命周期与线程相互对应\",{\"1\":{\"28\":1}}],[\"核心知识点总结\",{\"1\":{\"26\":1}}],[\"到处运行\",{\"1\":{\"26\":1}}],[\"以便其他的项目可以调用\",{\"1\":{\"36\":1}}],[\"以便实现一次编译\",{\"1\":{\"26\":1}}],[\"以上是最基本的es分布式引擎的框架设计\",{\"1\":{\"10\":1}}],[\"在mysql服务器授权的账号密码\",{\"1\":{\"49\":1}}],[\"在\",{\"1\":{\"35\":1}}],[\"在线程的虚拟机栈中存储\",{\"1\":{\"27\":1}}],[\"在操作系统层次之上构建的虚拟机\",{\"1\":{\"26\":1}}],[\"在博客文章文档中\",{\"1\":{\"8\":1}}],[\"本篇文章分享maven的作用和自动化构建项目的常见方法\",{\"1\":{\"32\":1}}],[\"本地方法栈\",{\"0\":{\"29\":1},\"1\":{\"26\":1,\"29\":1}}],[\"本页面包含一些论文分享的分类\",{\"1\":{\"3\":1,\"5\":1,\"12\":1}}],[\"程序计数器用来确定下一条指令执行的位置\",{\"1\":{\"27\":1}}],[\"程序计数器用于存放执行指令的地方\",{\"1\":{\"27\":1}}],[\"程序计数器pc\",{\"0\":{\"27\":1}}],[\"程序计数器\",{\"1\":{\"26\":1}}],[\"内存结构\",{\"1\":{\"26\":1}}],[\"输出静态final常量\",{\"1\":{\"25\":1}}],[\"输出栈大小\",{\"1\":{\"25\":1}}],[\"输出分解后的代码\",{\"1\":{\"25\":1}}],[\"输出内部类型签名\",{\"1\":{\"25\":1}}],[\"输出所有类和成员\",{\"1\":{\"25\":1}}],[\"输出行和变量的表\",{\"1\":{\"25\":1}}],[\"这是默认的\",{\"1\":{\"25\":1}}],[\"帮助\",{\"1\":{\"25\":1}}],[\"hashmap<string\",{\"1\":{\"52\":2}}],[\"html\",{\"1\":{\"42\":1}}],[\"httpmethod\",{\"1\":{\"41\":3}}],[\"http\",{\"1\":{\"41\":1,\"42\":1}}],[\"https\",{\"1\":{\"38\":1}}],[\"heap\",{\"0\":{\"30\":1},\"1\":{\"30\":2}}],[\"help\",{\"1\":{\"25\":1}}],[\"home\",{\"1\":{\"24\":1}}],[\"参数摘要\",{\"0\":{\"25\":1}}],[\"参考\",{\"1\":{\"6\":1,\"13\":1,\"18\":1,\"26\":1}}],[\"8\",{\"1\":{\"24\":5,\"49\":1}}],[\"806\",{\"1\":{\"20\":1}}],[\"805\",{\"1\":{\"20\":6}}],[\"7下载\",{\"1\":{\"46\":1}}],[\"7\",{\"1\":{\"24\":2,\"46\":1}}],[\"6\",{\"1\":{\"24\":2}}],[\"variables\",{\"1\":{\"48\":1}}],[\"value\",{\"1\":{\"42\":2}}],[\"v1\",{\"1\":{\"42\":1,\"49\":2}}],[\"virtual\",{\"1\":{\"26\":1}}],[\"verbose\",{\"1\":{\"25\":1}}],[\"version>\",{\"1\":{\"39\":1,\"52\":1}}],[\"version\",{\"1\":{\"24\":2,\"36\":1,\"41\":1}}],[\"v\",{\"1\":{\"24\":11,\"36\":1}}],[\"volatile\",{\"1\":{\"20\":2}}],[\"void\",{\"1\":{\"16\":1,\"20\":2,\"22\":1,\"24\":2,\"52\":1}}],[\"linux系统\",{\"1\":{\"51\":1}}],[\"line\",{\"1\":{\"24\":3}}],[\"linenumbertable\",{\"1\":{\"24\":3}}],[\"like\",{\"1\":{\"48\":1}}],[\"list<canalentry\",{\"1\":{\"52\":4}}],[\"list<response>\",{\"1\":{\"41\":2}}],[\"list<requestparameter>\",{\"1\":{\"41\":2}}],[\"list\",{\"1\":{\"41\":1}}],[\"l\",{\"1\":{\"25\":1}}],[\"ldc\",{\"1\":{\"24\":1}}],[\"ljava\",{\"1\":{\"24\":10}}],[\"lang\",{\"1\":{\"24\":15}}],[\"last\",{\"1\":{\"24\":1}}],[\"localhost\",{\"1\":{\"42\":1,\"52\":1}}],[\"locals=1\",{\"1\":{\"24\":2}}],[\"lockscope\",{\"1\":{\"20\":7,\"22\":4}}],[\"lock\",{\"1\":{\"20\":7,\"22\":4}}],[\"log\",{\"1\":{\"20\":5,\"22\":3,\"48\":1}}],[\"类型\",{\"1\":{\"52\":1}}],[\"类型是索引中文档的逻辑分组\",{\"1\":{\"8\":1}}],[\"类中每一个方法内\",{\"1\":{\"25\":1}}],[\"类方法定义\",{\"1\":{\"24\":1}}],[\"类基本信息\",{\"1\":{\"24\":1}}],[\"二进制\",{\"1\":{\"24\":1}}],[\"执行生成constpool\",{\"1\":{\"24\":1}}],[\"执行代码后发现不但输出了日志\",{\"1\":{\"20\":1}}],[\"示例\",{\"1\":{\"24\":1}}],[\"了解和解决各种java原理级别的问题\",{\"1\":{\"24\":1}}],[\"深入分析java的编译原理\",{\"1\":{\"24\":1}}],[\"并且堆也无法再扩展时\",{\"1\":{\"30\":1}}],[\"并显示每个方法的字节码的实际作用\",{\"1\":{\"24\":1}}],[\"并指定分词器等属性\",{\"1\":{\"8\":1}}],[\"该命令用于列出每个方法所执行的jvm指令\",{\"1\":{\"24\":1}}],[\"平时一般用javap\",{\"1\":{\"24\":1}}],[\"5\",{\"0\":{\"31\":1},\"1\":{\"24\":2}}],[\"52\",{\"1\":{\"24\":1}}],[\"524\",{\"1\":{\"22\":1}}],[\"522\",{\"1\":{\"22\":2}}],[\"512\",{\"1\":{\"22\":1}}],[\"此时运行不会出现a和b变量不同情况\",{\"1\":{\"22\":1}}],[\"应该在add和compare两个函数上都增加排他锁\",{\"1\":{\"22\":1}}],[\"应该始终相等\",{\"1\":{\"20\":1}}],[\"导致b多进行了一次b++操作\",{\"1\":{\"21\":1}}],[\"比较a和b两个变量\",{\"1\":{\"21\":1}}],[\"比如你数据量是\",{\"1\":{\"9\":1}}],[\"比如说你现在要在\",{\"1\":{\"8\":1}}],[\"目的是与\",{\"1\":{\"31\":1}}],[\"目前尽管add函数使用synchronized关键字解决了add函数线程安全性\",{\"1\":{\"21\":1}}],[\"目录下\",{\"1\":{\"51\":1}}],[\"目录\",{\"0\":{\"3\":1,\"5\":1,\"12\":1}}],[\"问题解决\",{\"0\":{\"22\":1}}],[\"问题分析\",{\"0\":{\"21\":1}}],[\"问题展示\",{\"0\":{\"20\":1}}],[\"9\",{\"1\":{\"24\":2}}],[\"999857\",{\"1\":{\"20\":1}}],[\"999856\",{\"1\":{\"20\":1}}],[\"996237\",{\"1\":{\"20\":1}}],[\"996236\",{\"1\":{\"20\":1}}],[\"992596\",{\"1\":{\"20\":1}}],[\"992597\",{\"1\":{\"20\":1}}],[\"988793\",{\"1\":{\"20\":1}}],[\"988792\",{\"1\":{\"20\":1}}],[\"979754\",{\"1\":{\"20\":1}}],[\"979751\",{\"1\":{\"20\":1}}],[\"journal\",{\"1\":{\"49\":1}}],[\"jar\",{\"1\":{\"34\":4,\"35\":2,\"36\":3}}],[\"java虚拟机\",{\"1\":{\"26\":1}}],[\"java\",{\"1\":{\"24\":18,\"26\":1,\"28\":1,\"29\":2,\"30\":6,\"31\":2,\"35\":1,\"41\":2}}],[\"javac\",{\"1\":{\"24\":1}}],[\"java文件\",{\"1\":{\"24\":1}}],[\"javap\",{\"1\":{\"24\":1}}],[\"javap可以用于反编译和查看编译器编译后的字节码\",{\"1\":{\"24\":1}}],[\"javap实际使用\",{\"0\":{\"24\":1}}],[\"javap使用\",{\"0\":{\"23\":1}}],[\"java业务开发常见错误100例\",{\"1\":{\"18\":1}}],[\"java何时加锁\",{\"0\":{\"18\":1}}],[\"java介绍页\",{\"0\":{\"17\":1}}],[\"java学习\",{\"0\":{\"11\":1},\"1\":{\"3\":1}}],[\"jconsole\",{\"1\":{\"30\":1}}],[\"jmap\",{\"1\":{\"30\":2}}],[\"jps\",{\"1\":{\"30\":1,\"51\":1}}],[\"jvm框架图\",{\"1\":{\"26\":1}}],[\"jvm的使用是为保证java程序跨平台运行\",{\"1\":{\"26\":1}}],[\"jvm内存结构\",{\"0\":{\"26\":1}}],[\"jvm\",{\"0\":{\"28\":1},\"1\":{\"24\":5,\"26\":2}}],[\"j\",{\"1\":{\"20\":7,\"22\":4}}],[\"不要和\",{\"1\":{\"48\":1}}],[\"不做处理\",{\"1\":{\"46\":1}}],[\"不执行测试用例\",{\"1\":{\"36\":2}}],[\"不会输出任何日志\",{\"1\":{\"20\":1}}],[\"不能添加返回false\",{\"1\":{\"16\":1}}],[\"同样进行累加操作\",{\"1\":{\"20\":1}}],[\"按道理\",{\"1\":{\"20\":1}}],[\"where\",{\"1\":{\"52\":1}}],[\"while\",{\"1\":{\"52\":1}}],[\"windows系统\",{\"1\":{\"51\":1}}],[\"will\",{\"1\":{\"49\":1}}],[\"withmethodannotation\",{\"1\":{\"41\":1}}],[\"web\",{\"1\":{\"38\":1,\"41\":1}}],[\"web工程对应\",{\"1\":{\"35\":1}}],[\"war文件\",{\"1\":{\"36\":1}}],[\"war\",{\"1\":{\"35\":3}}],[\"wrong2\",{\"1\":{\"20\":2}}],[\"workqueue\",{\"1\":{\"16\":2}}],[\"workercountof\",{\"1\":{\"16\":3}}],[\"最后的a>b应该始终是false吗\",{\"1\":{\"20\":1,\"22\":1}}],[\"age=188\",{\"1\":{\"52\":2}}],[\"age=18\",{\"1\":{\"52\":2}}],[\"aftercolumnslist\",{\"1\":{\"52\":2}}],[\"afmap\",{\"1\":{\"52\":3}}],[\"alibaba\",{\"1\":{\"52\":1}}],[\"aload\",{\"1\":{\"24\":1}}],[\"autogen\",{\"1\":{\"49\":1}}],[\"author\",{\"1\":{\"41\":1}}],[\"admin\",{\"1\":{\"46\":1}}],[\"adapter\",{\"1\":{\"46\":1}}],[\"address=127\",{\"1\":{\"49\":1}}],[\"add\",{\"1\":{\"20\":5,\"22\":3,\"41\":1}}],[\"addworker\",{\"1\":{\"16\":3}}],[\"any\",{\"1\":{\"41\":1}}],[\"annotation\",{\"1\":{\"41\":2}}],[\"annotations\",{\"1\":{\"41\":2}}],[\"apiresponses\",{\"1\":{\"42\":1}}],[\"apiimplicitparam\",{\"1\":{\"42\":1}}],[\"apiimplicitparams\",{\"1\":{\"42\":1}}],[\"apiinfobuilder\",{\"1\":{\"41\":1}}],[\"apiinfo\",{\"1\":{\"41\":4}}],[\"api\",{\"1\":{\"42\":2}}],[\"apis\",{\"1\":{\"41\":2}}],[\"apioperation\",{\"1\":{\"41\":2,\"42\":3}}],[\"application\",{\"0\":{\"40\":1}}],[\"arraylist<>\",{\"1\":{\"41\":2}}],[\"arraylist\",{\"1\":{\"41\":1}}],[\"artifactid>\",{\"1\":{\"39\":1,\"52\":1}}],[\"area\",{\"0\":{\"31\":1},\"1\":{\"31\":1}}],[\"args\",{\"1\":{\"24\":3,\"52\":1}}],[\"acc\",{\"1\":{\"24\":5}}],[\"a变量则大于b变量\",{\"1\":{\"21\":1}}],[\"a始终等于b吗\",{\"1\":{\"20\":1,\"22\":1}}],[\"a++\",{\"1\":{\"20\":1}}],[\"a\",{\"1\":{\"20\":11,\"22\":4}}],[\"如有疑问\",{\"1\":{\"41\":1}}],[\"如有侵权\",{\"1\":{\"32\":1}}],[\"如有侵权立即删除\",{\"1\":{\"18\":1}}],[\"如下\",{\"1\":{\"36\":1}}],[\"如clean\",{\"1\":{\"32\":1}}],[\"如果方法区无法满足新的内存分配需求时\",{\"1\":{\"31\":1}}],[\"如果\",{\"1\":{\"28\":1,\"30\":1}}],[\"如果线程请求的栈深度大于虚拟机所允许的栈深度\",{\"1\":{\"28\":1}}],[\"如果线程池正在运行\",{\"1\":{\"16\":1}}],[\"如果线程池已经停止\",{\"1\":{\"16\":1}}],[\"如果a多进行一次a++操作\",{\"1\":{\"21\":1}}],[\"如果在加载过程中运行了add函数\",{\"1\":{\"21\":1}}],[\"如果任务队列满了\",{\"1\":{\"16\":1}}],[\"转载仅用于学习\",{\"1\":{\"18\":1}}],[\"仓库链接\",{\"1\":{\"18\":1}}],[\"代码仓库视屏讲解\",{\"1\":{\"43\":1}}],[\"代码加锁\",{\"1\":{\"18\":1}}],[\"代表一条记录\",{\"1\":{\"8\":1}}],[\"提供相对友好的webui操作界面\",{\"1\":{\"46\":1}}],[\"提供增量数据订阅和消费服务\",{\"1\":{\"43\":1}}],[\"提供了一个完全统一规范的\",{\"1\":{\"34\":1}}],[\"提示\",{\"1\":{\"18\":1,\"24\":1,\"26\":1,\"28\":1,\"30\":1,\"36\":1,\"43\":1,\"46\":1}}],[\"提高读写能力\",{\"1\":{\"9\":1}}],[\"提高了吞吐量和性能\",{\"1\":{\"9\":1}}],[\"线程私有的\",{\"1\":{\"29\":1}}],[\"线程运行需要的内存空间\",{\"1\":{\"28\":1}}],[\"线程锁如何锁住变量\",{\"0\":{\"19\":1}}],[\"线程代码何时适合加锁\",{\"1\":{\"18\":1}}],[\"线程池运行原理\",{\"0\":{\"15\":1}}],[\"线程池可以管理一堆线程\",{\"1\":{\"14\":1}}],[\"线程池其实是一种池化的技术实现\",{\"1\":{\"14\":1}}],[\"将打包的结果部署到远程仓库或将\",{\"1\":{\"35\":1}}],[\"将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署\",{\"1\":{\"35\":1}}],[\"将java\",{\"1\":{\"35\":1}}],[\"将项目拆分成多个工程模块\",{\"1\":{\"34\":1}}],[\"将会抛出\",{\"1\":{\"31\":1}}],[\"将抛出stackoverflowerror异常\",{\"1\":{\"28\":1}}],[\"将你的个人介绍和档案放置在此处\",{\"1\":{\"17\":1,\"53\":1}}],[\"将数据导进\",{\"1\":{\"9\":1}}],[\"能够添加返回true\",{\"1\":{\"16\":1}}],[\"即为打开binlog模式\",{\"1\":{\"48\":1}}],[\"即为线程池正在运行\",{\"1\":{\"16\":1}}],[\"即时编译器编译后的代码缓存等数据\",{\"1\":{\"31\":1}}],[\"即可以通过最大值参数\",{\"1\":{\"30\":1}}],[\"即节点上的primary\",{\"1\":{\"10\":1}}],[\"小于0\",{\"1\":{\"16\":1}}],[\"bmap\",{\"1\":{\"52\":3}}],[\"beforecolumnslist\",{\"1\":{\"52\":2}}],[\"bean\",{\"1\":{\"41\":2}}],[\"bat\",{\"1\":{\"51\":1}}],[\"basepackage\",{\"1\":{\"41\":1}}],[\"black\",{\"1\":{\"49\":1}}],[\"bin`\",{\"1\":{\"48\":1}}],[\"bin\",{\"1\":{\"48\":1,\"49\":1,\"51\":1}}],[\"bin=mysql\",{\"1\":{\"48\":1}}],[\"binlog日志名称\",{\"1\":{\"49\":1}}],[\"binlog\",{\"1\":{\"48\":4}}],[\"bits\",{\"1\":{\"16\":2}}],[\"build\",{\"1\":{\"41\":3}}],[\"builders\",{\"1\":{\"41\":1}}],[\"boot\",{\"1\":{\"39\":1}}],[\"boolean\",{\"1\":{\"16\":1}}],[\"bytestring\",{\"1\":{\"52\":1}}],[\"bytes\",{\"1\":{\"24\":1}}],[\"b变量则大于a变量\",{\"1\":{\"21\":1}}],[\"b两个变量再比较\",{\"1\":{\"21\":1}}],[\"b++\",{\"1\":{\"20\":1}}],[\"b\",{\"1\":{\"20\":11,\"22\":4}}],[\"flags\",{\"1\":{\"24\":3}}],[\"from\",{\"1\":{\"24\":1}}],[\"format=row\",{\"1\":{\"48\":1}}],[\"format\",{\"1\":{\"48\":1}}],[\"for\",{\"1\":{\"20\":2,\"22\":1,\"52\":4}}],[\"filter\",{\"1\":{\"49\":2}}],[\"final\",{\"1\":{\"16\":2}}],[\"fieldref\",{\"1\":{\"24\":1}}],[\"field\",{\"1\":{\"8\":3,\"24\":1}}],[\"false\",{\"1\":{\"16\":2,\"20\":2}}],[\"000001\",{\"1\":{\"49\":1}}],[\"00\",{\"1\":{\"41\":1}}],[\"09\",{\"1\":{\"41\":1}}],[\"0<\",{\"1\":{\"39\":1,\"52\":1}}],[\"07\",{\"1\":{\"22\":4}}],[\"08\",{\"1\":{\"22\":4}}],[\"0\",{\"1\":{\"16\":2,\"20\":2,\"22\":1,\"24\":6,\"39\":1,\"41\":1,\"49\":4,\"52\":1}}],[\"尝试添加一个新的非核心工作线程来执行任务\",{\"1\":{\"16\":1}}],[\"尝试添加一个新的工作线程\",{\"1\":{\"16\":1}}],[\"尝试将任务添加到任务队列中\",{\"1\":{\"16\":1}}],[\"左面为true才会执行remove函数移除任务\",{\"1\":{\"16\":1}}],[\"双重检查线程池的状态\",{\"1\":{\"16\":1}}],[\"otter<\",{\"1\":{\"52\":1}}],[\"oas\",{\"1\":{\"41\":2}}],[\"org\",{\"1\":{\"41\":3}}],[\"order\",{\"1\":{\"8\":1}}],[\"object>\",{\"1\":{\"52\":4}}],[\"object\",{\"1\":{\"24\":4}}],[\"outofmemoryerror\",{\"1\":{\"30\":1,\"31\":1}}],[\"outofmemoryerror异常\",{\"1\":{\"28\":1}}],[\"out\",{\"1\":{\"24\":5,\"52\":4}}],[\"ok\",{\"1\":{\"20\":1,\"22\":1}}],[\"offer\",{\"1\":{\"16\":2}}],[\"少于核心线程数量则添加worker\",{\"1\":{\"16\":1}}],[\"<=\",{\"1\":{\"52\":1}}],[\"<version>1\",{\"1\":{\"52\":1}}],[\"<version>3\",{\"1\":{\"39\":1}}],[\"<artifactid>canal\",{\"1\":{\"52\":1}}],[\"<artifactid>springfox\",{\"1\":{\"39\":1}}],[\"<groupid>com\",{\"1\":{\"52\":1}}],[\"<groupid>io\",{\"1\":{\"39\":1}}],[\"<dependency>\",{\"1\":{\"39\":1,\"52\":1}}],[\"<init>\",{\"1\":{\"24\":4}}],[\"<<\",{\"1\":{\"16\":2}}],[\"<\",{\"1\":{\"16\":2,\"20\":3,\"22\":2,\"39\":1,\"52\":1}}],[\"检查当前运行的工作线程数是否少于核心线程数\",{\"1\":{\"16\":1}}],[\"=\",{\"1\":{\"16\":5,\"20\":5,\"22\":2,\"24\":28,\"41\":2,\"42\":3,\"49\":1,\"52\":15}}],[\"==\",{\"1\":{\"16\":2}}],[\"cnf\",{\"1\":{\"48\":1}}],[\"catch\",{\"1\":{\"52\":1}}],[\"canalentry\",{\"1\":{\"52\":9}}],[\"canalconnectors\",{\"1\":{\"52\":1}}],[\"canalconnector\",{\"1\":{\"52\":5}}],[\"canallauncher\",{\"1\":{\"51\":1}}],[\"canal的客户端\",{\"1\":{\"46\":1}}],[\"canal的各个组件的用途各不相同\",{\"1\":{\"46\":1}}],[\"canal功能\",{\"0\":{\"44\":1}}],[\"canal\",{\"0\":{\"45\":1,\"49\":1,\"52\":1},\"1\":{\"43\":1,\"46\":4,\"48\":1,\"49\":13,\"52\":2}}],[\"canal监听mysql增量数据\",{\"0\":{\"43\":1}}],[\"capacity\",{\"1\":{\"16\":2}}],[\"crossorigin\",{\"1\":{\"42\":2}}],[\"createrestapi\",{\"1\":{\"41\":1}}],[\"createtime\",{\"1\":{\"41\":1}}],[\"chat\",{\"1\":{\"42\":1}}],[\"checksum\",{\"1\":{\"24\":1}}],[\"client<\",{\"1\":{\"52\":1}}],[\"clean\",{\"1\":{\"35\":1,\"36\":9}}],[\"classes下\",{\"1\":{\"36\":1}}],[\"classfile\",{\"1\":{\"24\":1}}],[\"class文件的组成\",{\"1\":{\"24\":1}}],[\"class二进制文件\",{\"1\":{\"24\":1}}],[\"class\",{\"1\":{\"20\":1,\"24\":8,\"41\":2,\"42\":1}}],[\"c比较多\",{\"1\":{\"24\":1}}],[\"column\",{\"1\":{\"52\":8}}],[\"column>\",{\"1\":{\"52\":2}}],[\"connect\",{\"1\":{\"52\":1}}],[\"connectioncharset\",{\"1\":{\"49\":1}}],[\"conf\",{\"1\":{\"49\":1}}],[\"conf文件夹下修改\",{\"1\":{\"49\":1}}],[\"configuration\",{\"1\":{\"41\":2}}],[\"config\",{\"0\":{\"41\":1}}],[\"controller\",{\"1\":{\"41\":1}}],[\"context\",{\"1\":{\"41\":2}}],[\"constants\",{\"1\":{\"25\":1}}],[\"constant\",{\"1\":{\"24\":1,\"31\":2}}],[\"constpool\",{\"1\":{\"24\":15}}],[\"code\",{\"1\":{\"24\":3,\"41\":1}}],[\"compile\",{\"1\":{\"35\":1,\"36\":5}}],[\"compiled\",{\"1\":{\"24\":1}}],[\"compareright\",{\"1\":{\"22\":1}}],[\"compare\",{\"1\":{\"20\":6,\"22\":5}}],[\"com\",{\"1\":{\"24\":5,\"41\":1}}],[\"command\",{\"1\":{\"16\":9}}],[\"count\",{\"1\":{\"16\":2}}],[\"corepoolsize\",{\"1\":{\"16\":2}}],[\"ctl\",{\"1\":{\"16\":3}}],[\"c\",{\"1\":{\"16\":8,\"20\":7,\"22\":4,\"24\":1,\"25\":1}}],[\"初始数量为负数\",{\"1\":{\"16\":1}}],[\"name=ssskkk\",{\"1\":{\"52\":2}}],[\"name=zhangsan\",{\"1\":{\"52\":2}}],[\"name=mysql\",{\"1\":{\"49\":1}}],[\"name\",{\"1\":{\"52\":2}}],[\"nameandtype\",{\"1\":{\"24\":3}}],[\"native\",{\"0\":{\"29\":1},\"1\":{\"29\":2}}],[\"newsingleconnector\",{\"1\":{\"52\":1}}],[\"new\",{\"1\":{\"16\":1,\"20\":3,\"22\":3,\"41\":5,\"52\":3}}],[\"nullpointerexception\",{\"1\":{\"16\":1}}],[\"null\",{\"1\":{\"16\":2}}],[\"是否为\",{\"1\":{\"52\":1}}],[\"是一个伪装的mysql从库\",{\"1\":{\"46\":1}}],[\"是一个规范和完整的框架\",{\"1\":{\"38\":1}}],[\"是方法区的一部分\",{\"1\":{\"31\":1}}],[\"是虚拟机所管理的最大一块的内存空间\",{\"1\":{\"30\":1}}],[\"是的话则抛出nullpointerexception\",{\"1\":{\"16\":1}}],[\"是如何实现分布式的啊\",{\"1\":{\"6\":1}}],[\"首先检查提交的任务是否为null\",{\"1\":{\"16\":1}}],[\"首页\",{\"0\":{\"0\":1}}],[\"rowchange\",{\"1\":{\"52\":5}}],[\"rowdataslist\",{\"1\":{\"52\":2}}],[\"rowdata>\",{\"1\":{\"52\":1}}],[\"rowdata\",{\"1\":{\"52\":6}}],[\"row\",{\"1\":{\"48\":2}}],[\"root1\",{\"1\":{\"24\":1}}],[\"runtime\",{\"1\":{\"31\":1}}],[\"runnable\",{\"1\":{\"16\":1}}],[\"right2\",{\"1\":{\"22\":2}}],[\"regex=\",{\"1\":{\"49\":2}}],[\"regex\",{\"1\":{\"49\":1}}],[\"replaction\",{\"1\":{\"48\":1}}],[\"replica\",{\"1\":{\"9\":1,\"10\":3}}],[\"requestmapping\",{\"1\":{\"42\":1}}],[\"requesthandlerselectors\",{\"1\":{\"41\":2}}],[\"result\",{\"1\":{\"42\":1}}],[\"result<map>\",{\"1\":{\"42\":1}}],[\"restcontroller\",{\"1\":{\"42\":1}}],[\"restful\",{\"1\":{\"38\":1}}],[\"responsebuilder\",{\"1\":{\"41\":1}}],[\"responselist\",{\"1\":{\"41\":3}}],[\"resources\",{\"1\":{\"36\":3}}],[\"reject\",{\"1\":{\"16\":2}}],[\"remove\",{\"1\":{\"16\":1}}],[\"recheck\",{\"1\":{\"16\":3}}],[\"return\",{\"1\":{\"16\":3,\"20\":1,\"22\":1,\"24\":2,\"41\":4}}],[\"eventtype\",{\"1\":{\"52\":3}}],[\"equals\",{\"1\":{\"52\":1}}],[\"e\",{\"1\":{\"52\":2}}],[\"entrytype\",{\"1\":{\"52\":5}}],[\"entry\",{\"1\":{\"52\":6}}],[\"entry>\",{\"1\":{\"52\":1}}],[\"entries\",{\"1\":{\"52\":3}}],[\"enable\",{\"1\":{\"49\":1}}],[\"enableopenapi\",{\"1\":{\"41\":2}}],[\"enabledruid=false\",{\"1\":{\"49\":1}}],[\"enabled\",{\"1\":{\"40\":1}}],[\"example\",{\"1\":{\"49\":1,\"52\":1}}],[\"execute\",{\"1\":{\"16\":1}}],[\"else\",{\"1\":{\"16\":2,\"52\":1}}],[\"es具体概念理解\",{\"1\":{\"8\":1}}],[\"es集群是在多个机器上启动es进程组成的集群\",{\"1\":{\"7\":1}}],[\"es\",{\"0\":{\"7\":1,\"8\":1,\"9\":1,\"10\":1},\"1\":{\"6\":2,\"8\":6}}],[\"es分布式的结构分享\",{\"0\":{\"6\":1}}],[\"put\",{\"1\":{\"52\":2}}],[\"public和protected类和成员\",{\"1\":{\"25\":1}}],[\"public\",{\"1\":{\"16\":1,\"20\":4,\"22\":2,\"24\":8,\"25\":1,\"41\":2,\"42\":3,\"52\":1}}],[\"parsefrom\",{\"1\":{\"52\":1}}],[\"parameters\",{\"1\":{\"41\":2}}],[\"password\",{\"1\":{\"49\":2}}],[\"pathselectors\",{\"1\":{\"41\":1}}],[\"paths\",{\"1\":{\"41\":1}}],[\"package依次执行了clean\",{\"1\":{\"36\":1}}],[\"package包含了compile命令的过程\",{\"1\":{\"35\":1}}],[\"package和install的区别\",{\"1\":{\"32\":1}}],[\"package等命令\",{\"1\":{\"32\":1}}],[\"package\",{\"1\":{\"25\":1,\"35\":1,\"36\":3}}],[\"plugins\",{\"1\":{\"41\":1}}],[\"position=154\",{\"1\":{\"49\":1}}],[\"postmapping\",{\"1\":{\"42\":2}}],[\"post\",{\"1\":{\"41\":1}}],[\"port\",{\"1\":{\"42\":1}}],[\"pom\",{\"1\":{\"33\":1}}],[\"pool\",{\"1\":{\"24\":1,\"31\":2}}],[\"p\",{\"1\":{\"25\":1}}],[\"properties\",{\"1\":{\"49\":1}}],[\"protected\",{\"1\":{\"25\":1}}],[\"printstacktrace\",{\"1\":{\"52\":1}}],[\"printstream\",{\"1\":{\"24\":8}}],[\"println\",{\"1\":{\"24\":5,\"52\":4}}],[\"private\",{\"1\":{\"16\":4,\"25\":1,\"41\":3}}],[\"primary\",{\"1\":{\"9\":2,\"10\":1}}],[\"一般建议使用第二种\",{\"1\":{\"36\":1}}],[\"一个message\",{\"1\":{\"52\":1}}],[\"一个栈帧对应一个线程\",{\"1\":{\"28\":1}}],[\"一个栈由多个栈帧组成\",{\"1\":{\"28\":1}}],[\"一个索引可以拆分成多个\",{\"1\":{\"9\":1}}],[\"一个索引差不多就是相当于是\",{\"1\":{\"8\":1}}],[\"一共分为三步\",{\"1\":{\"16\":1}}],[\"让线程执行完任务之后不进行销毁\",{\"1\":{\"14\":1}}],[\"避免资源的重复创建和销毁带来的性能开销\",{\"1\":{\"14\":1}}],[\"池化技术的核心思想就是实现资源的复用\",{\"1\":{\"14\":1}}],[\"什么是线程池\",{\"0\":{\"14\":1},\"1\":{\"13\":1}}],[\"分享主要围绕如何使用canal快速搭建mysql增量数据订阅服务\",{\"1\":{\"43\":1}}],[\"分配过去\",{\"1\":{\"10\":1}}],[\"分类\",{\"0\":{\"2\":1}}],[\"节点运维等面向运维的功能\",{\"1\":{\"46\":1}}],[\"节点会控制将缺失的\",{\"1\":{\"10\":1}}],[\"节点的职责\",{\"1\":{\"10\":1}}],[\"挂了\",{\"1\":{\"10\":1}}],[\"身份\",{\"1\":{\"10\":1}}],[\"和最小值参数\",{\"1\":{\"30\":1}}],[\"和\",{\"1\":{\"10\":1,\"20\":1}}],[\"负责切换\",{\"1\":{\"10\":1}}],[\"维护索引元数据\",{\"1\":{\"10\":1}}],[\"框架设计\",{\"0\":{\"10\":1}}],[\"框架学习\",{\"0\":{\"4\":1},\"1\":{\"3\":1}}],[\"写入功能\",{\"1\":{\"48\":1}}],[\"写\",{\"1\":{\"9\":1}}],[\"增强吞吐能力\",{\"1\":{\"9\":1}}],[\"450\",{\"1\":{\"24\":1}}],[\"404\",{\"1\":{\"41\":1}}],[\"40\",{\"1\":{\"22\":1}}],[\"44\",{\"1\":{\"20\":7}}],[\"4\",{\"0\":{\"30\":1,\"36\":1},\"1\":{\"9\":1,\"24\":3,\"52\":1}}],[\"4t\",{\"1\":{\"9\":1}}],[\"很简单\",{\"1\":{\"9\":1}}],[\"怎么扩展\",{\"1\":{\"9\":1}}],[\"若现在数据量增加到\",{\"1\":{\"9\":1}}],[\"就会自动从中央仓库进行下载到本地仓库\",{\"1\":{\"34\":1}}],[\"就\",{\"1\":{\"9\":1}}],[\"个\",{\"1\":{\"9\":2}}],[\"3306\",{\"1\":{\"49\":1}}],[\"33\",{\"1\":{\"22\":1}}],[\"30\",{\"1\":{\"22\":2,\"41\":1}}],[\"3\",{\"0\":{\"16\":1,\"22\":1,\"29\":1,\"35\":1,\"50\":1,\"51\":1,\"52\":1},\"1\":{\"9\":1,\"16\":1,\"24\":4,\"44\":1,\"52\":1}}],[\"3t\",{\"1\":{\"9\":1}}],[\"存储部分数据\",{\"1\":{\"9\":1}}],[\"存储结构\",{\"0\":{\"7\":1}}],[\"每个es集群都会有一个master节点\",{\"1\":{\"10\":1}}],[\"每个\",{\"1\":{\"9\":2}}],[\"每个文档都是一个json对象\",{\"1\":{\"8\":1}}],[\"支持横向拓展\",{\"1\":{\"9\":1}}],[\"ssskkk\",{\"1\":{\"52\":1}}],[\"sleep\",{\"1\":{\"52\":1}}],[\"slaveid=0\",{\"1\":{\"49\":1}}],[\"slaveid\",{\"1\":{\"48\":1}}],[\"slf4j\",{\"1\":{\"20\":1,\"42\":1}}],[\"spring\",{\"1\":{\"41\":1}}],[\"springframework\",{\"1\":{\"41\":3}}],[\"springfox\",{\"1\":{\"40\":1,\"41\":6}}],[\"springfox<\",{\"1\":{\"39\":1}}],[\"spi\",{\"1\":{\"41\":1}}],[\"set\",{\"1\":{\"52\":1}}],[\"serverid\",{\"1\":{\"49\":1}}],[\"server\",{\"1\":{\"48\":1}}],[\"service\",{\"1\":{\"41\":1}}],[\"select\",{\"1\":{\"41\":1}}],[\"selflearn\",{\"1\":{\"24\":1}}],[\"scalartype\",{\"1\":{\"41\":1}}],[\"schema\",{\"1\":{\"8\":1,\"41\":1}}],[\"swagger3config\",{\"1\":{\"41\":1}}],[\"swagger官网\",{\"1\":{\"38\":1}}],[\"swagger\",{\"0\":{\"38\":1,\"41\":1,\"42\":1},\"1\":{\"38\":2,\"40\":1,\"41\":1,\"42\":1}}],[\"swagger接口文档分享\",{\"0\":{\"37\":1}}],[\"skip=true\",{\"1\":{\"36\":2}}],[\"skip=true的区别\",{\"1\":{\"36\":1}}],[\"site\",{\"1\":{\"36\":1}}],[\"size=1\",{\"1\":{\"24\":2}}],[\"size\",{\"1\":{\"24\":1,\"52\":1}}],[\"s\",{\"1\":{\"25\":1}}],[\"sourcefile\",{\"1\":{\"24\":2}}],[\"subscribe\",{\"1\":{\"52\":1}}],[\"super\",{\"1\":{\"24\":1}}],[\"sunspring\",{\"1\":{\"24\":6}}],[\"sunhb\",{\"1\":{\"24\":6,\"41\":1}}],[\"src\",{\"1\":{\"24\":1}}],[\"system\",{\"1\":{\"24\":5,\"52\":4}}],[\"synchronized\",{\"1\":{\"20\":1,\"22\":1}}],[\"storevalue\",{\"1\":{\"52\":2}}],[\"string\",{\"1\":{\"20\":1,\"22\":1,\"24\":10,\"52\":2}}],[\"stacks\",{\"1\":{\"29\":1}}],[\"stack\",{\"0\":{\"28\":1,\"29\":1}}],[\"stack=2\",{\"1\":{\"24\":1}}],[\"stack=1\",{\"1\":{\"24\":1}}],[\"starter<\",{\"1\":{\"39\":1}}],[\"start\",{\"1\":{\"20\":4,\"22\":5,\"51\":2}}],[\"static\",{\"1\":{\"16\":4,\"24\":3,\"52\":1}}],[\"sh\",{\"1\":{\"51\":2}}],[\"show\",{\"1\":{\"48\":1}}],[\"shutdown\",{\"1\":{\"16\":2}}],[\"shard替换\",{\"1\":{\"10\":1}}],[\"shard挂了\",{\"1\":{\"10\":1}}],[\"shard上\",{\"1\":{\"9\":1}}],[\"shard写完后\",{\"1\":{\"9\":1}}],[\"shard\",{\"1\":{\"9\":7,\"10\":4}}],[\"shard分区\",{\"0\":{\"9\":1}}],[\"26版本后会自动生成slaveid\",{\"1\":{\"49\":1}}],[\"26+\",{\"1\":{\"49\":1}}],[\"26\",{\"1\":{\"24\":2}}],[\"24\",{\"1\":{\"24\":2,\"41\":1}}],[\"23\",{\"1\":{\"24\":2}}],[\"22\",{\"1\":{\"24\":2}}],[\"21\",{\"1\":{\"24\":2}}],[\"20\",{\"1\":{\"24\":2}}],[\"2023\",{\"1\":{\"24\":1,\"41\":1}}],[\"29\",{\"1\":{\"20\":1,\"22\":2}}],[\"27\",{\"1\":{\"20\":1,\"24\":2}}],[\"25\",{\"1\":{\"20\":5,\"24\":2}}],[\"28\",{\"1\":{\"20\":6,\"24\":2}}],[\"2\",{\"0\":{\"9\":1,\"10\":1,\"15\":1,\"21\":1,\"25\":1,\"28\":1,\"34\":1,\"40\":1,\"41\":1,\"42\":1,\"45\":1,\"46\":1,\"47\":2,\"48\":2,\"49\":3,\"50\":1,\"51\":1,\"52\":2},\"1\":{\"16\":1,\"24\":2,\"44\":1,\"52\":1}}],[\"标题\",{\"1\":{\"8\":1}}],[\"相当于关系型数据库中的行\",{\"1\":{\"8\":1}}],[\"包部署到服务器上运行\",{\"1\":{\"35\":1}}],[\"包安装到本地仓库中\",{\"1\":{\"35\":1}}],[\"包或\",{\"1\":{\"35\":1}}],[\"包\",{\"1\":{\"34\":1,\"35\":2}}],[\"包管理体系\",{\"1\":{\"34\":1}}],[\"包全部导入进来\",{\"1\":{\"34\":1}}],[\"包所依赖的其他所有\",{\"1\":{\"34\":1}}],[\"包含java字节码的指令\",{\"1\":{\"25\":1}}],[\"包含一组键值对\",{\"1\":{\"8\":1}}],[\"包括标题\",{\"1\":{\"41\":1}}],[\"包括\",{\"1\":{\"26\":1}}],[\"包括线程池状态\",{\"1\":{\"16\":1}}],[\"包括es存储结构和es分布式框架设计\",{\"1\":{\"6\":1}}],[\"druid\",{\"1\":{\"49\":1}}],[\"dbpassword=xxx\",{\"1\":{\"49\":1}}],[\"dbpassword\",{\"1\":{\"49\":1}}],[\"dbusername=xxx\",{\"1\":{\"49\":1}}],[\"dbusername\",{\"1\":{\"49\":1}}],[\"dskiptests\",{\"1\":{\"36\":1}}],[\"dskiptests跟\",{\"1\":{\"36\":1}}],[\"dmaven\",{\"1\":{\"36\":3}}],[\"demo项目\",{\"0\":{\"52\":1}}],[\"demo\",{\"0\":{\"50\":1},\"1\":{\"52\":1}}],[\"decrypt\",{\"1\":{\"49\":1}}],[\"description\",{\"1\":{\"41\":3}}],[\"descriptor\",{\"1\":{\"24\":2}}],[\"dependency>\",{\"1\":{\"39\":1,\"52\":1}}],[\"deploy中获取数据\",{\"1\":{\"46\":1}}],[\"deployer\",{\"1\":{\"46\":1}}],[\"deploy等９个阶段\",{\"1\":{\"36\":1}}],[\"deploy依次执行了clean\",{\"1\":{\"36\":1}}],[\"deploy\",{\"1\":{\"35\":1,\"36\":1,\"46\":1}}],[\"docqa\",{\"1\":{\"42\":2}}],[\"docket\",{\"1\":{\"41\":3}}],[\"documentationtype\",{\"1\":{\"41\":2}}],[\"documentation\",{\"1\":{\"40\":1,\"41\":6}}],[\"document\",{\"1\":{\"8\":2}}],[\"done\",{\"1\":{\"20\":4,\"22\":3}}],[\"database\",{\"1\":{\"49\":1}}],[\"data\",{\"1\":{\"8\":1}}],[\"文档模块测试接口\",{\"1\":{\"42\":1}}],[\"文档是elasticsearch中最基本的数据单元\",{\"1\":{\"8\":1}}],[\"文本\",{\"1\":{\"8\":1}}],[\"文章\",{\"1\":{\"5\":1,\"12\":1}}],[\"映射定义了索引中每个字段的类型和属性\",{\"1\":{\"8\":1}}],[\"旅游\",{\"1\":{\"8\":1}}],[\"技术\",{\"1\":{\"8\":1}}],[\"例如\",{\"1\":{\"8\":3,\"25\":1}}],[\"try\",{\"1\":{\"52\":1}}],[\"true\",{\"1\":{\"16\":1,\"20\":3,\"40\":1,\"52\":1}}],[\"timestamp=\",{\"1\":{\"49\":1}}],[\"title\",{\"1\":{\"41\":1}}],[\"tar\",{\"1\":{\"46\":1}}],[\"tags\",{\"1\":{\"42\":1}}],[\"tablename\",{\"1\":{\"52\":2}}],[\"table\",{\"1\":{\"8\":1,\"31\":1,\"49\":1}}],[\"testchat\",{\"1\":{\"42\":1}}],[\"testcontroller\",{\"1\":{\"42\":1}}],[\"testcompile\",{\"1\":{\"36\":3}}],[\"testresources\",{\"1\":{\"36\":3}}],[\"test\",{\"1\":{\"35\":1,\"36\":8,\"42\":1}}],[\"thread\",{\"1\":{\"20\":9,\"22\":6,\"52\":1}}],[\"threadpoolexecutor执行方法\",{\"0\":{\"16\":1}}],[\"threadpoolexecutor线程池\",{\"0\":{\"13\":1}}],[\"throws\",{\"1\":{\"52\":1}}],[\"throw\",{\"1\":{\"16\":1}}],[\"type\",{\"1\":{\"8\":2}}],[\"索引是一组具有相似特征的文档的集合\",{\"1\":{\"8\":1}}],[\"索引分区\",{\"0\":{\"8\":1}}],[\"概念理解\",{\"1\":{\"8\":1}}],[\"message\",{\"1\":{\"52\":4}}],[\"method\",{\"0\":{\"29\":1,\"31\":1},\"1\":{\"24\":2,\"29\":1,\"31\":1}}],[\"methodref\",{\"1\":{\"24\":2}}],[\"my\",{\"1\":{\"48\":1}}],[\"mysql主库链接时起始的binlog的时间戳\",{\"1\":{\"49\":1}}],[\"mysql主库链接时起始的binlog偏移量\",{\"1\":{\"49\":1}}],[\"mysqld\",{\"1\":{\"48\":1}}],[\"mysql\",{\"0\":{\"48\":1},\"1\":{\"8\":2,\"43\":1,\"48\":2,\"49\":3}}],[\"mvn\",{\"1\":{\"36\":14}}],[\"minor\",{\"1\":{\"24\":1}}],[\"md5\",{\"1\":{\"24\":1}}],[\"modified\",{\"1\":{\"24\":1}}],[\"map<string\",{\"1\":{\"52\":2}}],[\"mapping\",{\"1\":{\"8\":2}}],[\"maven的作用\",{\"0\":{\"34\":1}}],[\"maven是基于项目对象模型\",{\"1\":{\"33\":1}}],[\"maven是apache软件基金会唯一维护的一款自动化构建工具\",{\"1\":{\"33\":1}}],[\"maven是什么\",{\"0\":{\"33\":1}}],[\"maven\",{\"0\":{\"32\":1,\"35\":1,\"36\":1,\"39\":1},\"1\":{\"34\":3,\"35\":1}}],[\"machine\",{\"1\":{\"26\":1}}],[\"major\",{\"1\":{\"24\":1}}],[\"main\",{\"1\":{\"24\":8,\"52\":1}}],[\"master\",{\"1\":{\"10\":2,\"49\":5}}],[\">\",{\"1\":{\"8\":4,\"20\":3,\"22\":3}}],[\"的\",{\"1\":{\"48\":1}}],[\"的索引\",{\"1\":{\"9\":1}}],[\"的索引分为五个层级\",{\"1\":{\"8\":1}}],[\"的数据\",{\"1\":{\"9\":1}}],[\"的分布式架构原理能说一下么\",{\"1\":{\"6\":1}}],[\"里的一个数据库\",{\"1\":{\"8\":1}}],[\"id=5\",{\"1\":{\"52\":2}}],[\"id=4\",{\"1\":{\"52\":2}}],[\"id=1\",{\"1\":{\"48\":1}}],[\"idx\",{\"1\":{\"8\":1}}],[\"import\",{\"1\":{\"41\":12}}],[\"io\",{\"1\":{\"24\":8,\"38\":1,\"41\":1}}],[\"i++\",{\"1\":{\"20\":2,\"22\":1}}],[\"i\",{\"1\":{\"20\":4,\"22\":2}}],[\"isrunning\",{\"1\":{\"16\":3}}],[\"inetsocketaddress\",{\"1\":{\"52\":1}}],[\"invalidprotocolbufferexception\",{\"1\":{\"52\":1}}],[\"invokevirtual\",{\"1\":{\"24\":1}}],[\"invokespecial\",{\"1\":{\"24\":1}}],[\"instance\",{\"1\":{\"49\":15}}],[\"install等8个阶段\",{\"1\":{\"36\":1}}],[\"install依次执行了clean\",{\"1\":{\"36\":1}}],[\"install\",{\"1\":{\"32\":1,\"35\":1,\"36\":2}}],[\"info\",{\"1\":{\"20\":12,\"22\":7}}],[\"interruptedexception\",{\"1\":{\"52\":1}}],[\"interesting\",{\"1\":{\"20\":13,\"22\":9}}],[\"int\",{\"1\":{\"16\":7,\"20\":4,\"22\":1}}],[\"index\",{\"1\":{\"8\":3,\"42\":1}}],[\"if\",{\"1\":{\"16\":7,\"20\":1,\"22\":1,\"52\":2}}],[\"中配置如下\",{\"1\":{\"48\":1}}],[\"中的第一次判断应该始终不会成立\",{\"1\":{\"20\":1}}],[\"中创建一个索引\",{\"1\":{\"8\":1}}],[\"中存储一些订单数据\",{\"1\":{\"8\":1}}],[\"中存储数据的基本单位是索引\",{\"1\":{\"8\":1}}],[\"你就应该在\",{\"1\":{\"8\":1}}],[\"14\",{\"1\":{\"24\":1}}],[\"12\",{\"1\":{\"24\":1}}],[\"11111\",{\"1\":{\"52\":1}}],[\"11\",{\"1\":{\"24\":2}}],[\"19\",{\"1\":{\"24\":2}}],[\"17\",{\"1\":{\"24\":2}}],[\"13\",{\"1\":{\"22\":1,\"24\":1}}],[\"1622d49f4c56fbb2f0292f5a2bfafc31\",{\"1\":{\"24\":1}}],[\"16\",{\"1\":{\"22\":4,\"24\":2}}],[\"18\",{\"1\":{\"20\":1,\"22\":1,\"24\":2}}],[\"1000\",{\"1\":{\"52\":1}}],[\"10000\",{\"1\":{\"20\":2,\"22\":1}}],[\"100\",{\"1\":{\"52\":1}}],[\"10\",{\"1\":{\"20\":7,\"24\":2}}],[\"15\",{\"1\":{\"20\":7,\"24\":2}}],[\"1t\",{\"1\":{\"9\":1}}],[\"1\",{\"0\":{\"7\":1,\"8\":2,\"9\":1,\"14\":1,\"19\":1,\"20\":2,\"21\":1,\"22\":1,\"24\":1,\"27\":1,\"33\":1,\"38\":1,\"39\":2,\"40\":1,\"41\":1,\"44\":1,\"46\":1,\"48\":1,\"51\":1},\"1\":{\"16\":3,\"20\":2,\"24\":3,\"41\":1,\"44\":4,\"46\":4,\"49\":1,\"52\":2}}],[\"介绍es的分布式架构原理\",{\"1\":{\"6\":1}}],[\"介绍页\",{\"0\":{\"1\":1}}],[\"合影\",{\"1\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
